%!PS-Adobe-3.0 EPSF-3.0%%Creator: Adobe Illustrator(R) 8.0%%AI8_CreatorVersion: 8.0.1%%For: (Harvey Gould) (Clark University)%%Title: (sine.eps)%%CreationDate: (4/23/01) (2:27 PM)%%BoundingBox: 129 273 461 464%%HiResBoundingBox: 129.6001 273.6001 460.04 463.2827%%DocumentProcessColors: Black%%DocumentFonts: Times-Roman%%DocumentNeededFonts: Times-Roman%%DocumentSuppliedResources: procset Adobe_level2_AI5 1.2 0%%+ procset Adobe_typography_AI5 1.0 1%%+ procset Adobe_ColorImage_AI6 1.3 0%%+ procset Adobe_Illustrator_AI5 1.3 0%%+ procset Adobe_cshow 2.0 8%%+ procset Adobe_shading_AI8 1.0 0%AI5_FileFormat 4.0%AI3_ColorUsage: Black&White%AI7_ImageSettings: 0%%CMYKProcessColor: 1 1 1 1 ([Registration])%%AI6_ColorSeparationSet: 1 1 (AI6 Default Color Separation Set) %%+ Options: 1 16 0 1 0 1 1 1 0 1 1 1 1 18 0 0 0 0 0 0 0 0 -1 -1 0 0 0 0 1 0 0 0 0 1 0 0 0 0 0 1 2 3 4%%+ PPD: 1 21 0 0 60 45 2 2 1 0 0 1 0 0 0 0 0 0 0 0 0 0 () %AI3_TemplateBox: 306 396 306 396%AI3_TileBox: 30 31 582 761%AI3_DocumentPreview: Macintosh_ColorPic%AI5_ArtSize: 612 792%AI5_RulerUnits: 2%AI5_ArtFlags: 1 1 0 1 0 1 1 0 0%AI5_TargetResolution: 800%AI5_NumLayers: 1%AI8_OpenToView: -6 612 1 634 437 18 0 1 3 40 0 0%AI5_OpenViewLayers: 7%%PageOrigin:30 31%%AI3_PaperRect:-30 761 582 -31%%AI3_Margin:30 -31 -30 31%AI7_GridSettings: 72 8 72 8 1 0 0.8 0.8 0.8 0.9 0.9 0.9%%EndComments%%BeginProlog%%BeginResource: procset Adobe_level2_AI5 1.2 0%%Title: (Adobe Illustrator (R) Version 5.0 Level 2 Emulation)%%Version: 1.2 0%%CreationDate: (04/10/93) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)userdict /Adobe_level2_AI5 26 dict dup begin	put	/packedarray where not	{		userdict begin		/packedarray		{			array astore readonly		} bind def		/setpacking /pop load def		/currentpacking false def	 end		0	} if	pop	userdict /defaultpacking currentpacking put true setpacking	/initialize	{		Adobe_level2_AI5 begin	} bind def	/terminate	{		currentdict Adobe_level2_AI5 eq		{		 end		} if	} bind def	mark	/setcustomcolor where not	{		/findcmykcustomcolor		{			(AI8_CMYK_CustomColor)			6 packedarray		} bind def		/findrgbcustomcolor		{			(AI8_RGB_CustomColor)			5 packedarray		} bind def		/setcustomcolor		{			exch 			aload pop dup			(AI8_CMYK_CustomColor) eq			{				pop pop				4				{					4 index mul					4 1 roll				} repeat				5 -1 roll pop				setcmykcolor			}			{				dup (AI8_RGB_CustomColor) eq				{					pop pop					3					{						1 exch sub						3 index mul 						1 exch sub						3 1 roll					} repeat					4 -1 roll pop					setrgbcolor				}				{					pop					4					{						4 index mul 4 1 roll					} repeat					5 -1 roll pop					setcmykcolor				} ifelse			} ifelse		}		def	} if	/setAIseparationgray	{		false setoverprint		0 setgray		/setseparationgray where{			pop setseparationgray		}{			/setcolorspace where{				pop				[/Separation (All) /DeviceCMYK {dup dup dup}] setcolorspace				1 exch sub setcolor			}{				setgray			}ifelse		}ifelse	} def		/gt38? mark {version cvr cvx exec} stopped {cleartomark true} {38 gt exch pop} ifelse def	userdict /deviceDPI 72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt put	userdict /level2?	systemdict /languagelevel known dup	{		pop systemdict /languagelevel get 2 ge	} if	put/level2ScreenFreq{ begin		60		HalftoneType 1 eq		{			pop Frequency		} if		HalftoneType 2 eq		{			pop GrayFrequency		} if		HalftoneType 5 eq		{			pop Default level2ScreenFreq		} if end} bind defuserdict /currentScreenFreq  	level2? {currenthalftone level2ScreenFreq} {currentscreen pop pop} ifelse putlevel2? not	{		/setcmykcolor where not		{			/setcmykcolor			{				exch .11 mul add exch .59 mul add exch .3 mul add				1 exch sub setgray			} def		} if		/currentcmykcolor where not		{			/currentcmykcolor			{				0 0 0 1 currentgray sub			} def		} if		/setoverprint where not		{			/setoverprint /pop load def		} if		/selectfont where not		{			/selectfont			{				exch findfont exch				dup type /arraytype eq				{					makefont				}				{					scalefont				} ifelse				setfont			} bind def		} if		/cshow where not		{			/cshow			{				[				0 0 5 -1 roll aload pop				] cvx bind forall			} bind def		} if	} if	cleartomark	/anyColor?	{		add add add 0 ne	} bind def	/testColor	{		gsave		setcmykcolor currentcmykcolor		grestore	} bind def	/testCMYKColorThrough	{		testColor anyColor?	} bind def	userdict /composite?	1 0 0 0 testCMYKColorThrough	0 1 0 0 testCMYKColorThrough	0 0 1 0 testCMYKColorThrough	0 0 0 1 testCMYKColorThrough	and and and	put	composite? not	{		userdict begin		gsave		/cyan? 1 0 0 0 testCMYKColorThrough def		/magenta? 0 1 0 0 testCMYKColorThrough def		/yellow? 0 0 1 0 testCMYKColorThrough def		/black? 0 0 0 1 testCMYKColorThrough def		grestore		/isCMYKSep? cyan? magenta? yellow? black? or or or def		/customColor? isCMYKSep? not def	 end	} if end defaultpacking setpacking%%EndResource%%BeginResource: procset Adobe_typography_AI5 1.0 1%%Title: (Typography Operators)%%Version: 1.0 1%%CreationDate:(6/10/1996) ()%%Copyright: ((C) 1987-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_typography_AI5 68 dict dup beginput/initialize{ begin begin	Adobe_typography_AI5 begin	Adobe_typography_AI5	{		dup xcheck		{			bind		} if		pop pop	} forall end end end	Adobe_typography_AI5 begin} def/terminate{	currentdict Adobe_typography_AI5 eq	{	 end	} if} def/modifyEncoding{	/_tempEncode exch ddef	/_pntr 0 ddef	{		counttomark -1 roll		dup type dup /marktype eq		{			pop pop exit		}		{			/nametype eq			{				_tempEncode /_pntr dup load dup 3 1 roll 1 add ddef 3 -1 roll				put			}			{				/_pntr exch ddef			} ifelse		} ifelse	} loop	_tempEncode} def/havefont{	systemdict /languagelevel known		{		/Font resourcestatus dup			{ exch pop exch pop }		if		}		{		systemdict /FontDirectory get 1 index known			{ pop true }			{			systemdict /fileposition known				{				dup length 6 add exch				Ss 6 250 getinterval				cvs pop				Ss exch 0 exch getinterval				status					{ pop pop pop pop true }					{ false }				ifelse				}				{				pop false				}			ifelse			}		ifelse		}	ifelse} def/TE{	StandardEncoding 256 array copy modifyEncoding	/_nativeEncoding exch def} def/subststring {	exch 2 index exch search	{		exch pop		exch dup () eq		{			pop exch concatstring		}		{			3 -1 roll			exch concatstring			concatstring		} ifelse		exch pop true	}	{		pop pop false	} ifelse} def/concatstring {	1 index length 1 index length	1 index add	string	dup 0 5 index putinterval	dup 2 index 4 index putinterval	4 1 roll pop pop pop} def%/TZ{	dup type /arraytype eq	{		/_wv exch def	}	{		/_wv 0 def	} ifelse	/_useNativeEncoding exch def	2 index havefont	{		3 index		255 string		cvs				dup		(_Symbol_)		eq		{			pop			2 index			findfont					}		{			1 index 0 eq			{				dup length 1 sub				1 exch				getinterval								cvn				findfont			}			{				pop 2 index findfont			} ifelse		} ifelse	}	{		dup 1 eq		{			2 index 64 string cvs			dup (-90pv-RKSJ-) (-83pv-RKSJ-) subststring			{				exch pop dup havefont				{					findfont false				}				{					pop true				} ifelse			}			{				pop	dup				(-90ms-RKSJ-) (-Ext-RKSJ-) subststring				{					exch pop dup havefont					{						findfont false					}					{						pop true					} ifelse				}				{					pop pop true				} ifelse			} ifelse			{				1 index 1 eq				{					/Ryumin-Light-Ext-RKSJ-V havefont					{/Ryumin-Light-Ext-RKSJ-V}					{/Courier}					ifelse				}				{					/Ryumin-Light-83pv-RKSJ-H havefont					{/Ryumin-Light-83pv-RKSJ-H}					{/Courier}					ifelse				} ifelse				findfont				[1 0 0.5 1 0 0] makefont			} if		}		{			/Courier findfont		} ifelse	} ifelse	_wv type /arraytype eq	{		_wv makeblendedfont	} if	dup length 10 add dict begin	mark exch	{		1 index /FID ne		{			def		} if		cleartomark mark	} forall	pop	/FontScript exch def	/FontDirection exch def	/FontRequest exch def	/FontName exch def	counttomark 0 eq	{		1 _useNativeEncoding eq		{			/Encoding _nativeEncoding def		} if		cleartomark	}	{		/Encoding load 256 array copy		modifyEncoding /Encoding exch def	} ifelse	FontName currentdict end	definefont pop} def/tr{	_ax _ay 3 2 roll} def/trj{	_cx _cy _sp _ax _ay 6 5 roll} def/a0{	/Tx	{		dup		currentpoint 3 2 roll		tr _psf		newpath moveto		tr _ctm _pss	} ddef	/Tj	{		dup		currentpoint 3 2 roll		trj _pjsf		newpath moveto		trj _ctm _pjss	} ddef} def/a1{W B} def/e0{	/Tx	{		tr _psf	} ddef	/Tj	{		trj _pjsf	} ddef} def/e1{W F } def/i0{	/Tx	{		tr sp	} ddef	/Tj	{		trj jsp	} ddef} def/i1{	W N} def/o0{	/Tx	{		tr sw rmoveto	} ddef	/Tj	{		trj swj rmoveto	} ddef} def/r0{	/Tx	{		tr _ctm _pss	} ddef	/Tj	{		trj _ctm _pjss	} ddef} def/r1{W S} def/To{	pop _ctm currentmatrix pop} def/TO{	iTe _ctm setmatrix newpath} def/Tp{	pop _tm astore pop _ctm setmatrix	_tDict begin	/W	{	} def	/h	{	} def} def/TP{ end	iTm 0 0 moveto} def/Tr{	_render 3 le	{		currentpoint newpath moveto	} if	dup 8 eq	{		pop 0	}	{		dup 9 eq		{			pop 1		} if	} ifelse	dup /_render exch ddef	_renderStart exch get load exec} def/iTm{	_ctm setmatrix _tm concat	_shift aload pop _lineorientation 1 eq { exch } if translate	_scale aload pop _lineorientation 1 eq _yokoorientation 1 eq or { exch } if scale} def/Tm{	_tm astore pop iTm 0 0 moveto} def/Td{	_mtx translate _tm _tm concatmatrix pop iTm 0 0 moveto} def/iTe{	_render -1 eq	{	}	{		_renderEnd _render get dup null ne		{			load exec		}		{			pop		} ifelse	} ifelse	/_render -1 ddef} def/Ta{	pop} def/Tf{	1 index type /nametype eq	{		dup 0.75 mul 1 index 0.25 mul neg	} if	/_fontDescent exch ddef	/_fontAscent exch ddef	/_fontSize exch ddef	/_fontRotateAdjust _fontAscent _fontDescent add 2 div neg ddef	/_fontHeight _fontSize ddef	findfont _fontSize scalefont setfont} def/Tl{	pop neg 0 exch	_leading astore pop} def/Tt{	pop} def/TW{	3 npop} def/Tw{	/_cx exch ddef} def/TC{	3 npop} def/Tc{	/_ax exch ddef} def/Ts{	0 exch	_shift astore pop	currentpoint	iTm	moveto} def/Ti{	3 npop} def/Tz{	count 1 eq { 100 } if	100 div exch 100 div exch	_scale astore pop	iTm} def/TA{	pop} def/Tq{	pop} def/Tg{	pop} def/TG{	pop} def/Tv{	/_lineorientation exch ddef} def/TV{	/_charorientation exch ddef} def/Ty{	dup /_yokoorientation exch ddef 1 sub neg Tv} def/TY{	pop} def/T~{	Tx} def/Th{	pop pop pop pop pop} def/TX{	pop} def/Tk{	_fontSize mul 1000 div	_lineorientation 0 eq { neg 0 } { 0 exch } ifelse	rmoveto	pop} def/TK{	2 npop} def/T*{	_leading aload pop	_lineorientation 0 ne { exch } if	Td} def/T*-{	_leading aload pop	_lineorientation 0 ne { exch } if	exch neg exch neg	Td} def/T-{	_ax neg 0 rmoveto	_lineorientation 1 eq _charorientation 0 eq and { 1 TV _hyphen Tx 0 TV } { _hyphen Tx } ifelse} def/T+{} def/TR{	_ctm currentmatrix pop	_tm astore pop	iTm 0 0 moveto} def/TS{	currentfont 3 1 roll	/_Symbol_ findfont _fontSize scalefont setfont		0 eq	{		Tx	}	{		Tj	} ifelse	setfont} def/Xb{	pop pop} def/Tb /Xb load def/Xe{	pop pop pop pop} def/Te /Xe load def/XB{} def/TB /XB load defcurrentdict readonly popendsetpacking%/X^{	currentfont 5 1 roll	dup havefont		{		findfont _fontSize scalefont setfont		}		{		pop		exch		} ifelse	2 index 0 eq	{		Tx	}	{		Tj	} ifelse	pop	pop	setfont} def/T^	/X^	load def%%EndResource%%BeginProcSet: Adobe_ColorImage_AI6 1.3 0userdict /Adobe_ColorImage_AI6 known not{	userdict /Adobe_ColorImage_AI6 53 dict put } ifuserdict /Adobe_ColorImage_AI6 get begin/initialize { 	Adobe_ColorImage_AI6 begin	Adobe_ColorImage_AI6 {		dup type /arraytype eq {			dup xcheck {				bind			} if		} if		pop pop	} forall} def/terminate { end } defcurrentdict /Adobe_ColorImage_AI6_Vars known not {	/Adobe_ColorImage_AI6_Vars 41 dict def} ifAdobe_ColorImage_AI6_Vars begin	/plateindex -1 def	/_newproc null def	/_proc1 null def	/_proc2 null def	/sourcearray 4 array def	/_ptispace null def	/_ptiname null def	/_pti0 0 def	/_pti1 0 def	/_ptiproc null def	/_ptiscale 0 def	/_pticomps 0 def	/_ptibuf 0 string def	/_gtigray 0 def	/_cticmyk null def	/_rtirgb null def	/XIEnable true def	/XIType 0 def	/XIEncoding 0 def	/XICompression 0 def	/XIChannelCount 0 def	/XIBitsPerPixel 0 def	/XIImageHeight 0 def	/XIImageWidth 0 def	/XIImageMatrix null def	/XIRowBytes 0 def	/XIFile null def	/XIBuffer1 null def	/XIBuffer2 null def	/XIBuffer3 null def	/XIDataProc null def	/XIColorSpace /DeviceGray def	/XIColorValues 0 def	/XIPlateList false defend/ci6colorimage /colorimage where {/colorimage get}{null} ifelse def/ci6image systemdict /image get def/ci6curtransfer systemdict /currenttransfer get def/ci6curoverprint /currentoverprint where {/currentoverprint get}{{_of}} ifelse def/ci6foureq {	4 index ne {		pop pop pop false	}{		4 index ne {			pop pop false		}{			4 index ne {				pop false			}{				4 index eq			} ifelse		} ifelse	} ifelse} def/ci6testplate {	Adobe_ColorImage_AI6_Vars begin		/plateindex -1 def		/setcmykcolor where {			pop			gsave			1 0 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 1 0 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 1 0 setcmykcolor systemdict /currentgray get exec 1 exch sub			0 0 0 1 setcmykcolor systemdict /currentgray get exec 1 exch sub			grestore			1 0 0 0 ci6foureq { 				/plateindex 0 def			}{				0 1 0 0 ci6foureq { 					/plateindex 1 def				}{					0 0 1 0 ci6foureq {						/plateindex 2 def					}{						0 0 0 1 ci6foureq { 							/plateindex 3 def						}{							0 0 0 0 ci6foureq {								/plateindex 5 def							} if						} ifelse					} ifelse				} ifelse			} ifelse			pop pop pop pop		} if		plateindex end} def/ci6concatprocs {	/packedarray where {		pop dup type /packedarraytype eq 2 index type		/packedarraytype eq or	}{		false	} ifelse	{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		_proc1 aload pop		_proc2 aload pop		_proc1 length		_proc2 length add		packedarray cvx	}{		/_proc2 exch cvlit def		/_proc1 exch cvlit def		/_newproc _proc1 length _proc2 length add array def		_newproc 0 _proc1 putinterval		_newproc _proc1 length _proc2 putinterval		_newproc cvx	} ifelse} def/ci6istint {	type /arraytype eq } def/ci6isspot {	dup type /arraytype eq {		dup length 1 sub get /Separation eq	}{		pop false	} ifelse} def/ci6spotname {	dup ci6isspot {dup length 2 sub get}{pop ()} ifelse} def/ci6altspace {	aload pop pop pop ci6colormake} def/ci6numcomps {	dup /DeviceGray eq {		pop 1	}{		dup /DeviceRGB eq {			pop 3		}{			/DeviceCMYK eq {				4			}{				1			} ifelse		} ifelse	} ifelse} def/ci6marksplate {	dup /DeviceGray eq {		pop plateindex 3 eq	}{		dup /DeviceRGB eq {			pop plateindex 5 ne		}{			dup /DeviceCMYK eq {				pop plateindex 5 ne			}{				dup ci6isspot {					/findcmykcustomcolor where {						pop						dup length 2 sub get						0.1 0.1 0.1 0.1 5 -1 roll						findcmykcustomcolor 1 setcustomcolor						systemdict /currentgray get exec						1 ne					}{						pop plateindex 5 ne					} ifelse				}{					pop plateindex 5 ne				} ifelse			} ifelse		} ifelse	} ifelse} def/ci6colormake {	dup ci6numcomps	exch 1 index 2 add 1 roll	dup 1 eq {pop}{array astore} ifelse	exch} def/ci6colorexpand {	dup ci6spotname exch	dup ci6istint {		ci6altspace		exch 4 1 roll	}{		1 3 1 roll	} ifelse} def/ci6colortint {	dup /DeviceGray eq {		3 1 roll 1 exch sub mul 1 exch sub exch	}{		dup /DeviceRGB eq {			3 1 roll {1 exch sub 1 index mul 1 exch sub exch} forall pop 3 array astore exch		}{			dup /DeviceCMYK eq {				3 1 roll {1 index mul exch} forall pop 4 array astore exch			}{				3 1 roll mul exch			} ifelse		} ifelse	} ifelse} def/ci6colortocmyk {	dup /DeviceGray eq {		pop 1 exch sub 0 0 0 4 -1 roll 4 array astore	}{		dup /DeviceRGB eq {			pop aload pop _rgbtocmyk 4 array astore		}{			dup /DeviceCMYK eq {				pop			}{				ci6altspace ci6colortint ci6colortocmyk			} ifelse		} ifelse	} ifelse} def/ci6makeimagedict {	7 dict begin		/ImageType 1 def		/Decode exch def		/DataSource exch def		/ImageMatrix exch def		/BitsPerComponent exch def		/Height exch def		/Width exch def	currentdict end} def/ci6stringinvert {	0 1 2 index length 1 sub {		dup 2 index exch get 255 exch sub 2 index 3 1 roll put	} for} def/ci6stringknockout {	0 1 2 index length 1 sub {		255 2 index 3 1 roll put	} for} def/ci6stringapply {	0 1 4 index length 1 sub {		dup		4 index exch get		3 index 3 1 roll		3 index exec	} for	pop exch pop} def/ci6walkrgbstring {	0 3 index	dup length 1 sub 0 3 3 -1 roll {		3 getinterval {} forall		5 index exec		3 index	} for		 5 {pop} repeat} def/ci6walkcmykstring{	0 3 index	dup length 1 sub 0 4 3 -1 roll {		4 getinterval {} forall				6 index exec				3 index			} for		5 { pop } repeat	} def/ci6putrgbtograystr{	.11 mul exch		.59 mul add exch		.3 mul add		cvi 3 copy put		pop 1 add} def/ci6putcmyktograystr{	exch .11 mul add		exch .59 mul add		exch .3 mul add		dup 255 gt { pop 255 } if		255 exch sub cvi 3 copy put		pop 1 add} def/ci6rgbtograyproc {		Adobe_ColorImage_AI6_Vars begin 		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putrgbtograystr load exch		ci6walkrgbstring end} def/ci6cmyktograyproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec		XIBuffer3		dup 3 1 roll 				/ci6putcmyktograystr load exch		ci6walkcmykstring end} def/ci6separatecmykproc {		Adobe_ColorImage_AI6_Vars begin		sourcearray 0 get exec				XIBuffer3				0 2 index				plateindex 4 2 index length 1 sub {			get 255 exch sub						3 copy put pop 1 add						2 index		} for		pop pop exch pop end} def	/ci6compositeimage {	dup 1 eq {		pop pop image	}{		/ci6colorimage load null ne {			ci6colorimage		}{			3 1 roll pop			sourcearray 0 3 -1 roll put			3 eq {/ci6rgbtograyproc}{/ci6cmyktograyproc} ifelse load			image		} ifelse	} ifelse} def/ci6knockoutimage {	gsave	0 ci6curtransfer exec 1 ci6curtransfer exec	eq {		0 ci6curtransfer exec 0.5 lt	}{		0 ci6curtransfer exec 1 ci6curtransfer exec gt	} ifelse	{{pop 0}}{{pop 1}} ifelse	systemdict /settransfer get exec	ci6compositeimage	grestore} def/ci6drawimage {	ci6testplate -1 eq {		pop ci6compositeimage	}{		dup type /arraytype eq {			dup length plateindex gt {plateindex get}{pop false} ifelse		}{			{				true			}{				dup 1 eq {plateindex 3 eq}{plateindex 3 le} ifelse			} ifelse		} ifelse		{			dup 1 eq {				pop pop ci6image			}{				dup 3 eq {					ci6compositeimage				}{					pop pop					sourcearray 0 3 -1 roll put					/ci6separatecmykproc load					ci6image				} ifelse			} ifelse		}{			ci6curoverprint {				7 {pop} repeat			}{				ci6knockoutimage			} ifelse		} ifelse	} ifelse} def/ci6proctintimage {	/_ptispace exch store /_ptiname exch store /_pti1 exch store /_pti0 exch store /_ptiproc exch store	/_pticomps _ptispace ci6numcomps store	/_ptiscale _pti1 _pti0 sub store	level2? {		_ptiname length 0 gt version cvr 2012 ge and {			[/Separation _ptiname _ptispace {_ptiproc}] setcolorspace			[_pti0 _pti1] ci6makeimagedict ci6image		}{			[/Indexed _ptispace 255 {255 div _ptiscale mul _pti0 add _ptiproc}] setcolorspace			[0 255] ci6makeimagedict ci6image		} ifelse	}{		_pticomps 1 eq {			{				dup				{					255 div _ptiscale mul _pti0 add _ptiproc 255 mul cvi put				} ci6stringapply			} ci6concatprocs ci6image		}{			{				dup length _pticomps mul dup _ptibuf length ne {/_ptibuf exch string store}{pop} ifelse				_ptibuf {					exch _pticomps mul exch 255 div _ptiscale mul _pti0 add _ptiproc					_pticomps 2 add -2 roll					_pticomps 1 sub -1 0 {						1 index add 2 index exch						5 -1 roll						255 mul cvi put					} for					pop pop				} ci6stringapply			} ci6concatprocs false _pticomps			/ci6colorimage load null eq {7 {pop} repeat}{ci6colorimage} ifelse		} ifelse	} ifelse} def/ci6graytintimage {	/_gtigray 5 -1 roll store	{1 _gtigray sub mul 1 exch sub} 4 1 roll	/DeviceGray ci6proctintimage} def/ci6cmyktintimage {	/_cticmyk 5 -1 roll store	{_cticmyk {1 index mul exch} forall pop} 4 1 roll	/DeviceCMYK ci6proctintimage} def/ci6rgbtintimage {	/_rtirgb 5 -1 roll store	{_rtirgb {1 exch sub 1 index mul 1 exch sub exch} forall pop} 4 1 roll	/DeviceRGB ci6proctintimage} def/ci6tintimage {	ci6testplate -1 eq {		ci6colorexpand		3 -1 roll 5 -1 roll {0}{0 exch} ifelse 4 2 roll		dup /DeviceGray eq {			pop ci6graytintimage		}{			dup /DeviceRGB eq {				pop ci6rgbtintimage			}{				pop ci6cmyktintimage			} ifelse		} ifelse	}{		dup ci6marksplate {			plateindex 5 lt {				ci6colortocmyk plateindex get				dup 0 eq ci6curoverprint and {					7 {pop} repeat				}{					1 exch sub					exch {1 0}{0 1} ifelse () ci6graytintimage				} ifelse			}{				pop exch {0}{0 exch} ifelse 0 3 1 roll () ci6graytintimage			} ifelse		}{			ci6curoverprint {				8 {pop} repeat			}{				pop pop pop				{pop 1} 0 1 () /DeviceGray ci6proctintimage			} ifelse		} ifelse	} ifelse} def/XINullImage {} def/XIImageMask {	XIImageWidth XIImageHeight false	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	imagemask} def/XIImageTint {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	XIType 3 eq XIColorValues XIColorSpace ci6tintimage} def/XIImage {	XIImageWidth XIImageHeight XIBitsPerPixel	[XIImageWidth 0 0 XIImageHeight neg 0 0]	/XIDataProc load	false XIChannelCount XIPlateList ci6drawimage} def/XG {	pop pop} def/XF {	13 {pop} repeat} def/Xh {	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		/XIImageHeight exch def		/XIImageWidth exch def		/XIImageMatrix exch def		0 0 moveto		XIImageMatrix concat		XIImageWidth XIImageHeight scale				/_lp /null ddef		_fc		/_lp /imagemask ddef end} def/XH {	Adobe_ColorImage_AI6_Vars begin		grestore end} def/XIEnable {	Adobe_ColorImage_AI6_Vars /XIEnable 3 -1 roll put} def/XC {	Adobe_ColorImage_AI6_Vars begin		ci6colormake		/XIColorSpace exch def		/XIColorValues exch def end} def/XIPlates {	Adobe_ColorImage_AI6_Vars begin		/XIPlateList exch def end} def/XI{	Adobe_ColorImage_AI6_Vars begin		gsave		/XIType exch def		cvi dup		256 idiv /XICompression exch store		256 mod /XIEncoding exch store		pop pop		/XIChannelCount exch def		/XIBitsPerPixel exch def		/XIImageHeight exch def		/XIImageWidth exch def		pop pop pop pop		/XIImageMatrix exch def		XIBitsPerPixel 1 eq {			XIImageWidth 8 div ceiling cvi		}{			XIImageWidth XIChannelCount mul		} ifelse		/XIRowBytes exch def		XIEnable {			/XIBuffer3 XIImageWidth string def			XICompression 0 eq {				/XIBuffer1 XIRowBytes string def				XIEncoding 0 eq {					{currentfile XIBuffer1 readhexstring pop}				}{					{currentfile XIBuffer1 readstring pop}				} ifelse			}{				/XIBuffer1 256 string def				/XIBuffer2 XIRowBytes string def				{currentfile XIBuffer1 readline pop (%) anchorsearch {pop} if}				/ASCII85Decode filter /DCTDecode filter				/XIFile exch def				{XIFile XIBuffer2 readstring pop}			} ifelse			/XIDataProc exch def						XIType 1 ne {				0 setgray			} if			XIType 1 eq {				XIImageMask			}{				XIType 2 eq XIType 3 eq or {					XIImageTint				}{					XIImage				} ifelse			} ifelse		}{			XINullImage		} ifelse		/XIPlateList false def		grestore end} defend%%EndProcSet%%BeginResource: procset Adobe_Illustrator_AI5 1.3 0%%Title: (Adobe Illustrator (R) Version 8.0 Full Prolog)%%Version: 1.3 0%%CreationDate: (3/7/1994) ()%%Copyright: ((C) 1987-1998 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_Illustrator_AI5_vars 112 dict dup beginput/_?cmyk false def/_eo false def/_lp /none def/_pf{} def/_ps{} def/_psf{} def/_pss{} def/_pjsf{} def/_pjss{} def/_pola 0 def/_doClip 0 def/cf currentflat def/_lineorientation 0 def/_charorientation 0 def/_yokoorientation 0 def/_tm matrix def/_renderStart[/e0 /r0 /a0 /o0 /e1 /r1 /a1 /i0] def/_renderEnd[null null null null /i1 /i1 /i1 /i1] def/_render -1 def/_shift [0 0] def/_ax 0 def/_ay 0 def/_cx 0 def/_cy 0 def/_leading[0 0] def/_ctm matrix def/_mtx matrix def/_sp 16#020 def/_hyphen (-) def/_fontSize 0 def/_fontAscent 0 def/_fontDescent 0 def/_fontHeight 0 def/_fontRotateAdjust 0 def/Ss 256 string defSs 0 (fonts/) putinterval/_cnt 0 def/_scale [1 1] def/_nativeEncoding 0 def/_useNativeEncoding 0 def/_tempEncode 0 def/_pntr 0 def/_tDict 2 dict def/_hfname 100 string def/_hffound false def/Tx{} def/Tj{} def/CRender{} def/_AI3_savepage{} def/_gf null def/_cf 4 array def/_rgbf 3 array def/_if null def/_of false def/_fc{} def/_gs null def/_cs 4 array def/_rgbs 3 array def/_is null def/_os false def/_sc{} def/_pd 1 dict def/_ed 15 dict def/_pm matrix def/_fm null def/_fd null def/_fdd null def/_sm null def/_sd null def/_sdd null def/_i null def/_lobyte 0 def/_hibyte 0 def/_cproc null def/_cscript 0 def/_hvax 0 def/_hvay 0 def/_hvwb 0 def/_hvcx 0 def/_hvcy 0 def/_bitfont null def/_bitlobyte 0 def/_bithibyte 0 def/_bitkey null def/_bitdata null def/_bitindex 0 def/discardSave null def/buffer 256 string def/beginString null def/endString null def/endStringLength null def/layerCnt 1 def/layerCount 1 def/perCent (%) 0 get def/perCentSeen? false def/newBuff null def/newBuffButFirst null def/newBuffLast null def/clipForward? false defenduserdict /Adobe_Illustrator_AI5 known not {	userdict /Adobe_Illustrator_AI5 100 dict put} ifuserdict /Adobe_Illustrator_AI5 get begin/initialize{	Adobe_Illustrator_AI5 dup begin	Adobe_Illustrator_AI5_vars begin	/_aicmykps where {pop /_?cmyk _aicmykps def}if	discardDict	{		bind pop pop	} forall	dup /nc get begin	{		dup xcheck 1 index type /operatortype ne and		{			bind		} if		pop pop	} forall end	newpath} def/terminate{ end end} def/_null def/ddef{	Adobe_Illustrator_AI5_vars 3 1 roll put} def/xput{	dup load dup length exch maxlength eq	{		dup dup load dup		length 2 mul dict copy def	} if	load begin	def end} def/npop{	{		pop	} repeat} def/hswj{	dup stringwidth 3 2 roll	{		_hvwb eq { exch _hvcx add exch _hvcy add } if		exch _hvax add exch _hvay add	} cforall} def/vswj{	0 0 3 -1 roll	{		dup 255 le		_charorientation 1 eq		and		{			dup cstring stringwidth 5 2 roll			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			4 -1 roll sub exch			3 -1 roll sub exch		}		{			_hvwb eq { exch _hvcy sub exch _hvcx sub } if			exch _hvay sub exch _hvax sub			_fontHeight sub		} ifelse	} cforall} def/swj{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hswj } { vswj } ifelse} def/sw{	0 0 0 6 3 roll swj} def/vjss{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			gsave			false charpath currentpoint			5 index setmatrix stroke			grestore			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				gsave			2 index false charpath			6 index setmatrix stroke			grestore				moveto pop pop		} ifelse	} cforall	6 npop} def/hjss{	4 1 roll	{		dup cstring		gsave		false charpath currentpoint		5 index setmatrix stroke		grestore		moveto		_sp eq		{			5 index 5 index rmoveto		} if		2 copy rmoveto	} cforall	6 npop} def/jss{	_lineorientation 0 eq { hjss } { vjss } ifelse} def/ss{	0 0 0 7 3 roll jss} def/vjsp{	4 1 roll	{		dup cstring		dup length 1 eq		_charorientation 1 eq		and		{			-90 rotate			currentpoint			_fontRotateAdjust add			moveto			false charpath            currentpoint			_fontRotateAdjust sub			moveto			_sp eq			{				5 index 5 index rmoveto			} if			2 copy rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			5 index sub			3 index _sp eq			{				9 index sub			} if				currentpoint			exch 4 index stringwidth pop 2 div sub			exch _fontAscent sub			moveto				2 index false charpath				moveto pop pop		} ifelse	} cforall	6 npop} def/hjsp{    4 1 roll    {        dup cstring        false charpath        _sp eq        {            5 index 5 index rmoveto        } if        2 copy rmoveto    } cforall    6 npop} def/jsp{	matrix currentmatrix    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/sp{    matrix currentmatrix    0 0 0 7 3 roll    _lineorientation 0 eq {hjsp} {vjsp} ifelse} def/pl{	transform	0.25 sub round 0.25 add exch	0.25 sub round 0.25 add exch	itransform} def/setstrokeadjust where{	pop true setstrokeadjust	/c	{		curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll curveto	} def	/V	/v load def	/y	{		2 copy curveto	} def	/Y	/y load def	/l	{		lineto	} def	/L	/l load def	/m	{		moveto	} def}{	/c	{		pl curveto	} def	/C	/c load def	/v	{		currentpoint 6 2 roll pl curveto	} def	/V	/v load def	/y	{		pl 2 copy curveto	} def	/Y	/y load def	/l	{		pl lineto	} def	/L	/l load def	/m	{		pl moveto	} def} ifelse/d{	setdash} def/cf{} def/i{	dup 0 eq	{		pop cf	} if	setflat} def/j{	setlinejoin} def/J{	setlinecap} def/M{	setmiterlimit} def/w{	setlinewidth} def/XR{	0 ne	/_eo exch ddef} def/H{} def/h{	closepath} def/N{	_pola 0 eq	{		_doClip 1 eq		{			_eo {eoclip} {clip} ifelse /_doClip 0 ddef		} if		newpath	}	{		/CRender		{			N		} ddef	} ifelse} def/n{	N} def/F{	_pola 0 eq	{		_doClip 1 eq		{			gsave _pf grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _fc			/_doClip 0 ddef		}		{			_pf		} ifelse	}	{		/CRender		{			F		} ddef	} ifelse} def/f{	closepath	F} def/S{	_pola 0 eq	{		_doClip 1 eq		{			gsave _ps grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			_ps		} ifelse	}	{		/CRender		{			S		} ddef	} ifelse} def/s{	closepath	S} def/B{	_pola 0 eq	{		_doClip 1 eq		gsave F grestore		{			gsave S grestore _eo {eoclip} {clip} ifelse newpath /_lp /none ddef _sc			/_doClip 0 ddef		}		{			S		} ifelse	}	{		/CRender		{			B		} ddef	} ifelse} def/b{	closepath	B} def/W{	/_doClip 1 ddef} def/*{	count 0 ne	{		dup type /stringtype eq		{			pop		} if	} if	newpath} def/u{} def/U{} def/q{	_pola 0 eq	{		gsave	} if} def/Q{	_pola 0 eq	{		grestore	} if} def/*u{	_pola 1 add /_pola exch ddef} def/*U{	_pola 1 sub /_pola exch ddef	_pola 0 eq	{		CRender	} if} def/D{	pop} def/*w{} def/*W{} def/`{	/_i save ddef	clipForward?	{		nulldevice	} if	6 1 roll 4 npop	concat pop	userdict begin	/showpage	{	} def	0 setgray	0 setlinecap	1 setlinewidth	0 setlinejoin	10 setmiterlimit	[] 0 setdash	/setstrokeadjust where {pop false setstrokeadjust} if	newpath	0 setgray	false setoverprint} def/~{ end	_i restore} def/_rgbtocmyk{	3	{		1 exch sub 3 1 roll	} repeat	3 copy 1 4 1 roll	3	{		3 index 2 copy gt		{			exch		} if		pop 4 1 roll	} repeat	pop pop pop	4 1 roll	3	{		3 index sub		3 1 roll	} repeat	4 -1 roll} def/setrgbfill{	_rgbf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_rgbf aload pop setrgbcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/setrgbstroke{	_rgbs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_rgbs aload pop setrgbcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/O{	0 ne	/_of exch ddef	/_lp /none ddef} def/R{	0 ne	/_os exch ddef	/_lp /none ddef} def/g{	/_gf exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/G{	/_gs exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/k{	_cf astore pop	/_fc	{		_lp /fill ne		{			_of setoverprint			_cf aload pop setcmykcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/K{	_cs astore pop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_cs aload pop setcmykcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xa{	_?cmyk {		3 npop k	}{		setrgbfill 4 npop	} ifelse} def/XA{	_?cmyk {		3 npop K	}{		setrgbstroke 4 npop	} ifelse} def/Xs{	/_gf exch ddef	5 npop	/_fc	{		_lp /fill ne		{			_of setoverprint			_gf setAIseparationgray			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XS{	/_gs exch ddef	5 npop	/_sc	{		_lp /stroke ne		{			_os setoverprint			_gs setAIseparationgray			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/Xx{	exch	/_gf exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/XX{	exch	/_gs exch ddef	0 eq {		findcmykcustomcolor	}{		_?cmyk {true}{/findrgbcustomcolor where{pop false}{true}ifelse}ifelse		{			4 1 roll 3 npop			findcmykcustomcolor		}{			8 -4 roll 4 npop			findrgbcustomcolor		} ifelse	} ifelse	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/x{	/_gf exch ddef	findcmykcustomcolor	/_if exch ddef	/_fc	{		_lp /fill ne		{			_of setoverprint			_if _gf 1 exch sub setcustomcolor			/_lp /fill ddef		} if	} ddef	/_pf	{		_fc		_eo {eofill} {fill} ifelse	} ddef	/_psf	{		_fc		hvashow	} ddef	/_pjsf	{		_fc		hvawidthshow	} ddef	/_lp /none ddef} def/X{	/_gs exch ddef	findcmykcustomcolor	/_is exch ddef	/_sc	{		_lp /stroke ne		{			_os setoverprint			_is _gs 1 exch sub setcustomcolor			/_lp /stroke ddef		} if	} ddef	/_ps	{		_sc		stroke	} ddef	/_pss	{		_sc		ss	} ddef	/_pjss	{		_sc		jss	} ddef	/_lp /none ddef} def/XK{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		K	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		XA	} ifelse} def/Xk{	3 -1 roll pop	0 eq	{		1 exch sub		3 {dup 3 1 roll mul 5 1 roll} repeat		mul 4 1 roll		k	}	{		1 exch sub 4 1 roll		3 {1 exch sub 3 index mul 1 exch sub 3 1 roll} repeat		4 -1 roll pop		Xa	} ifelse} def/A{	pop} def/annotatepage{userdict /annotatepage 2 copy known {get exec} {pop pop} ifelse} def/XT {	pop pop} def/Xt {	pop} def/discard{	save /discardSave exch store	discardDict begin	/endString exch store	gt38?	{		2 add	} if	load	stopped	pop end	discardSave restore} bind defuserdict /discardDict 7 dict dup beginput/pre38Initialize{	/endStringLength endString length store	/newBuff buffer 0 endStringLength getinterval store	/newBuffButFirst newBuff 1 endStringLength 1 sub getinterval store	/newBuffLast newBuff endStringLength 1 sub 1 getinterval store} def/shiftBuffer{	newBuff 0 newBuffButFirst putinterval	newBuffLast 0	currentfile read not	{	stop	} if	put} def0{	pre38Initialize	mark	currentfile newBuff readstring exch pop	{		{			newBuff endString eq			{				cleartomark stop			} if			shiftBuffer		} loop	}	{	stop	} ifelse} def1{	pre38Initialize	/beginString exch store	mark	currentfile newBuff readstring exch pop	{		{			newBuff beginString eq			{				/layerCount dup load 1 add store			}			{				newBuff endString eq				{					/layerCount dup load 1 sub store					layerCount 0 eq					{						cleartomark stop					} if				} if			} ifelse			shiftBuffer		} loop	} if} def2{	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			endString eq {				cleartomark stop			} if		}ifelse	} loop} def3{	/beginString exch store	/layerCnt 1 store	mark	{		currentfile buffer {readline} stopped {			% assume error was due to overfilling the buffer		}{			not			{				stop			} if			dup beginString eq			{				pop /layerCnt dup load 1 add store			}			{				endString eq				{					layerCnt 1 eq					{						cleartomark stop					}					{						/layerCnt dup load 1 sub store					} ifelse				} if			} ifelse		}ifelse	} loop} defenduserdict /clipRenderOff 15 dict dup beginput{	/n /N /s /S /f /F /b /B}{	{		_doClip 1 eq		{			/_doClip 0 ddef _eo {eoclip} {clip} ifelse		} if		newpath	} def} forall/Tr /pop load def/Bb {} def/BB /pop load def/Bg {12 npop} def/Bm {6 npop} def/Bc /Bm load def/Bh {4 npop} defend/Lb{	6 npop	7 2 roll	5 npop	0 eq	{		0 eq		{			(%AI5_BeginLayer) 1 (%AI5_EndLayer--) discard		}		{						/clipForward? true def						/Tx /pop load def			/Tj /pop load def						currentdict end clipRenderOff begin begin		} ifelse	}	{		0 eq		{			save /discardSave exch store		} if	} ifelse} bind def/LB{	discardSave dup null ne	{		restore	}	{		pop		clipForward?		{			currentdict		 end		 end		 begin								/clipForward? false ddef		} if	} ifelse} bind def/Pb{	pop pop	0 (%AI5_EndPalette) discard} bind def/Np{	0 (%AI5_End_NonPrinting--) discard} bind def/Ln /pop load def/Ap/pop load def/Ar{	72 exch div	0 dtransform dup mul exch dup mul add sqrt	dup 1 lt	{		pop 1	} if	setflat} def/Mb{	q} def/Md{} def/MB{	Q} def/nc 4 dict defnc begin/setgray{	pop} bind def/setcmykcolor{	4 npop} bind def/setrgbcolor{	3 npop} bind def/setcustomcolor{	2 npop} bind defcurrentdict readonly popend/XP{	4 npop} bind def/XD{	pop} bind defendsetpacking%%EndResource%%BeginResource: procset Adobe_cshow 2.0 8%%Title: (Writing System Operators)%%Version: 2.0 8%%CreationDate: (1/23/89) ()%%Copyright: ((C) 1992-1996 Adobe Systems Incorporated All Rights Reserved)currentpacking true setpackinguserdict /Adobe_cshow 14 dict dup begin put/initialize{	Adobe_cshow begin	Adobe_cshow	{		dup xcheck		{			bind		} if		pop pop	} forall end	Adobe_cshow begin} def/terminate{currentdict Adobe_cshow eq	{ end	} if} def/cforall{	/_lobyte 0 ddef	/_hibyte 0 ddef	/_cproc exch ddef	/_cscript currentfont /FontScript known { currentfont /FontScript get } { -1 } ifelse ddef	{		/_lobyte exch ddef		_hibyte 0 eq		_cscript 1 eq		_lobyte 129 ge _lobyte 159 le and		_lobyte 224 ge _lobyte 252 le and or and		_cscript 2 eq		_lobyte 161 ge _lobyte 254 le and and		_cscript 3 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript 25 eq		_lobyte 161 ge _lobyte 254 le and and    	_cscript -1 eq		or or or or and		{			/_hibyte _lobyte ddef		}		{			_hibyte 256 mul _lobyte add			_cproc			/_hibyte 0 ddef		} ifelse	} forall} def/cstring{	dup 256 lt	{		(s) dup 0 4 3 roll put	}	{		dup 256 idiv exch 256 mod		(hl) dup dup 0 6 5 roll put 1 4 3 roll put	} ifelse} def/clength{	0 exch	{ 256 lt { 1 } { 2 } ifelse add } cforall} def/hawidthshow{	{		dup cstring		show		_hvax _hvay rmoveto		_hvwb eq { _hvcx _hvcy rmoveto } if	} cforall} def/vawidthshow{	{		dup 255 le		_charorientation 1 eq		and		{			-90 rotate			0 _fontRotateAdjust rmoveto			cstring			_hvcx _hvcy _hvwb _hvax _hvay 6 -1 roll awidthshow			0 _fontRotateAdjust neg rmoveto			90 rotate		}		{			currentpoint			_fontHeight sub			exch _hvay sub exch _hvax sub			2 index _hvwb eq { exch _hvcy sub exch _hvcx sub } if			3 2 roll			cstring			dup stringwidth pop 2 div neg _fontAscent neg rmoveto			show			moveto		} ifelse	} cforall} def/hvawidthshow{	6 1 roll	/_hvay exch ddef	/_hvax exch ddef	/_hvwb exch ddef	/_hvcy exch ddef	/_hvcx exch ddef	_lineorientation 0 eq { hawidthshow } { vawidthshow } ifelse} def/hvwidthshow{	0 0 3 -1 roll hvawidthshow} def/hvashow{	0 0 0 6 -3 roll hvawidthshow} def/hvshow{	0 0 0 0 0 6 -1 roll hvawidthshow} defcurrentdict readonly pop endsetpacking%%EndResource%%BeginResource: procset Adobe_shading_AI8 1.0 0%%Title: (Adobe Illustrator 8 Shading Procset)%%Version: 1.0 0%%CreationDate: (12/17/97) ()%%Copyright: ((C) 1987-1997 Adobe Systems Incorporated All Rights Reserved)userdict /defaultpacking currentpacking put true setpackinguserdict /Adobe_shading_AI8 10 dict dup begin put/initialize {	Adobe_shading_AI8 begin	Adobe_shading_AI8 bdprocs	Mesh /initialize get exec} def/terminate {	currentdict Adobe_shading_AI8 eq {	 end	} if} def/bdprocs {	{		dup xcheck 1 index type /arraytype eq and {			bind		} if		pop pop	} forall} def/X! {pop} def/X# {pop pop} def/Mesh 40 dict defMesh begin/initialize {	Mesh bdprocs	Mesh begin		/emulate? /AI8MeshEmulation where {			pop AI8MeshEmulation		}{			systemdict /shfill known not		} ifelse def end} def/bd {	shadingdict begin} def/paint {	emulate? {	 end	}{		/_lp /none ddef _fc /_lp /none ddef				/AIColorSpace AIColorSpace tocolorspace store		/ColorSpace AIColorSpace topsspace store				version_ge_3010.106 not systemdict /setsmoothness known and {			0.0001 setsmoothness		} if				composite? {			/DataSource getdatasrc def			Matrix concat			currentdict end			shfill		}{			AIColorSpace makesmarks AIPlateList markingplate and not isoverprint and {			 end			}{				/ColorSpace /DeviceGray store				/Decode [0 1 0 1 0 1] store				/DataSource getplatesrc def				Matrix concat				currentdict end				shfill			} ifelse		} ifelse	} ifelse} def/shadingdict 12 dict defshadingdict begin	/ShadingType 6 def	/BitsPerCoordinate 16 def	/BitsPerComponent 8 def	/BitsPerFlag 8 defend/datafile null def/databuf 256 string def/dataptr 0 def/srcspace null def/srcchannels 0 def/dstchannels 0 def/dstplate 0 def/srctodstcolor null def/getplatesrc {	/srcspace AIColorSpace store	/srcchannels AIColorSpace getnchannels store	/dstchannels 1 store	/dstplate getplateindex store	/srctodstcolor srcspace makesmarks {		dstplate 4 eq {			{1 exch sub}		}{			{srcspace tocmyk 3 dstplate sub index 1 exch sub 5 1 roll 4 {pop} repeat}		} ifelse	}{		{srcchannels {pop} repeat 1}	} ifelse store	/datafile getdatasrc store	/rdpatch168 load DataLength () /SubFileDecode filter} def/getdatasrc {	/rdcmntline load /ASCII85Decode filter} def/rdpatch168 {	/dataptr 0 store	49 rdcount	4 {		dup {pop srcchannels getint8} if		dup {pop srctodstcolor dstchannels putint8 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdpatch3216 {	/dataptr 0 store	97 rdcount	4 {		dup {pop srcchannels getint16} if		dup {pop srctodstcolor dstchannels putint16 true} if	} repeat	{databuf 0 dataptr getinterval}{()} ifelse} def/rdcount {	dup 0 gt {		datafile databuf dataptr 4 -1 roll getinterval readstring		exch length dataptr add /dataptr exch store	}{		true	} ifelse} def/getint8 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 255 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint8 {	dup dataptr add /dataptr exch store	dataptr exch	{		1 sub exch		255 mul cvi		databuf 2 index		3 -1 roll put	} repeat	pop} def /getint16 {	mark true 3 -1 roll	{		dup {pop datafile read} if		dup {pop 256 mul datafile read} if		dup {pop add 65535 div true} if	} repeat	{		counttomark 1 add -1 roll pop true	}{		cleartomark false	} ifelse} def/putint16 {	dup 2 mul dataptr add /dataptr exch store	dataptr exch	{		2 sub exch		65535 mul cvi dup		256 idiv databuf 3 index 3 -1 roll put		256 mod databuf 2 index 1 add 3 -1 roll put	} repeat	pop} def /srcbuf 256 string def/rdcmntline {	currentfile srcbuf readline pop	(%) anchorsearch {pop} if} def/getplateindex {	0 [cyan? magenta? yellow? black? customColor?] {{exit} if 1 add} forall} def/aicsarray 4 array def/aicsaltvals 4 array def/aicsaltcolr aicsaltvals def/tocolorspace {	dup type /arraytype eq {		mark exch aload pop		aicsarray 0 3 -1 roll put		aicsarray 1 3 -1 roll put		dup aicsarray 2 3 -1 roll put		gettintxform aicsarray 3 3 -1 roll put		counttomark aicsaltvals 0 3 -1 roll getinterval /aicsaltcolr exch store		aicsaltcolr astore pop pop		aicsarray	} if} def/subtintxform {aicsaltcolr {1 index mul exch} forall pop} def/addtintxform {aicsaltcolr {1 sub 1 index mul 1 add exch} forall pop} def/gettintxform {	/DeviceRGB eq {/addtintxform}{/subtintxform} ifelse load} def/getnchannels {	dup type /arraytype eq {0 get} if	colorspacedict exch get begin Channels end} def/makesmarks {	composite? {		pop true	}{		dup dup type /arraytype eq {0 get} if		colorspacedict exch get begin MarksPlate end	} ifelse} def/markingplate {	composite? {		pop true	}{		dup type /arraytype eq {			dup length getplateindex gt {getplateindex get}{pop false} ifelse		} if	} ifelse} def/tocmyk {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToCMYK end} def/topsspace {	dup dup type /arraytype eq {0 get} if	colorspacedict exch get begin ToPSSpace end} def/colorspacedict 5 dict dup begin	/DeviceGray 4 dict dup begin		/Channels 1 def		/MarksPlate {pop black?} def		/ToCMYK {pop 1 exch sub 0 0 0 4 -1 roll} def		/ToPSSpace {} def end def	/DeviceRGB 4 dict dup begin		/Channels 3 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop _rgbtocmyk} def		/ToPSSpace {} def end def	/DeviceCMYK 4 dict dup begin		/Channels 4 def		/MarksPlate {pop isCMYKSep?} def		/ToCMYK {pop} def		/ToPSSpace {} def end def	/Separation 4 dict dup begin		/Channels 1 def		/MarksPlate {			/findcmykcustomcolor where {				pop dup 1 exch ToCMYK 5 -1 roll 1 get				findcmykcustomcolor 1 setcustomcolor				systemdict /currentgray get exec				1 ne			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {} def end def	/Process 4 dict dup begin		/Channels 1 def		/MarksPlate {			isCMYKSep? {				1 exch ToCMYK 4 array astore getplateindex get 0 ne 			}{				pop false			} ifelse		} def		/ToCMYK {			dup 2 get mark exch 4 2 roll			3 get exec			counttomark -1 roll tocmyk			5 -1 roll pop		} def		/ToPSSpace {			4 array copy dup 0 /Separation put		} def end defend def/isoverprint {	/currentoverprint where {pop currentoverprint}{_of} ifelse} def/version_ge_3010.106 {   version {cvr} stopped {      pop      false   }{      3010.106 ge   } ifelse} defendenddefaultpacking setpacking%%EndResource%%EndProlog%%BeginSetup%%IncludeFont: Times-Romanuserdict /_useSmoothShade false putuserdict /_aicmykps false putuserdict /_forceToCMYK false putAdobe_level2_AI5 /initialize get execAdobe_cshow /initialize get execAdobe_Illustrator_AI5_vars Adobe_Illustrator_AI5 Adobe_typography_AI5 /initialize get execAdobe_ColorImage_AI6 /initialize get execAdobe_shading_AI8 /initialize get execAdobe_Illustrator_AI5 /initialize get exec[39/quotesingle 96/grave 128/Adieresis/Aring/Ccedilla/Eacute/Ntilde/Odieresis/Udieresis/aacute/agrave/acircumflex/adieresis/atilde/aring/ccedilla/eacute/egrave/ecircumflex/edieresis/iacute/igrave/icircumflex/idieresis/ntilde/oacute/ograve/ocircumflex/odieresis/otilde/uacute/ugrave/ucircumflex/udieresis/dagger/degree/cent/sterling/section/bullet/paragraph/germandbls/registered/copyright/trademark/acute/dieresis/.notdef/AE/Oslash/.notdef/plusminus/.notdef/.notdef/yen/mu/.notdef/.notdef/.notdef/.notdef/.notdef/ordfeminine/ordmasculine/.notdef/ae/oslash/questiondown/exclamdown/logicalnot/.notdef/florin/.notdef/.notdef/guillemotleft/guillemotright/ellipsis/space/Agrave/Atilde/Otilde/OE/oe/endash/emdash/quotedblleft/quotedblright/quoteleft/quoteright/divide/.notdef/ydieresis/Ydieresis/fraction/currency/guilsinglleft/guilsinglright/fi/fl/daggerdbl/periodcentered/quotesinglbase/quotedblbase/perthousand/Acircumflex/Ecircumflex/Aacute/Edieresis/Egrave/Iacute/Icircumflex/Idieresis/Igrave/Oacute/Ocircumflex/.notdef/Ograve/Uacute/Ucircumflex/Ugrave/dotlessi/circumflex/tilde/macron/breve/dotaccent/ring/cedilla/hungarumlaut/ogonek/caronTE%AI55J_Tsume: None%AI3_BeginEncoding: _Times-Roman Times-Roman[/_Times-Roman/Times-Roman 0 0 0 TZ%AI3_EndEncoding TrueType[161/degree 173/notequal 176/infinity/plusminus/lessequal/greaterequal181/mu/partialdiff/summation/product/pi/integral 189/Omega 195/radical 197/approxequal 198/Delta 214/divide/lozenge 240/apple/_Symbol_/Symbol 0 0 0 TZ%AI5_Begin_NonPrintingNp%AI3_BeginPattern: (Yellow Stripe)(Yellow Stripe) 8.4499 4.6 80.4499 76.6 [%AI3_Tile(0 O 0 R 0 0.4 1 0 k 0 0.4 1 0 K) @(%AI6_BeginPatternLayer800 Ar0 J 0 j 3.6 w 4 M []0 d%AI3_Note:0 D0 XR8.1999 8.1999 m80.6999 8.1999 LS8.1999 22.6 m80.6999 22.6 LS8.1999 37.0001 m80.6999 37.0001 LS8.1999 51.3999 m80.6999 51.3999 LS8.1999 65.8 m80.6999 65.8 LS8.1999 15.3999 m80.6999 15.3999 LS8.1999 29.8 m80.6999 29.8 LS8.1999 44.1999 m80.6999 44.1999 LS8.1999 58.6 m80.6999 58.6 LS8.1999 73.0001 m80.6999 73.0001 LS%AI6_EndPatternLayer) &] E%AI3_EndPattern%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp3 Bn%AI5_BeginGradient: (Black & White)(Black & White) 0 2 Bd[<FFFEFDFCFBFAF9F8F7F6F5F4F3F2F1F0EFEEEDECEBEAE9E8E7E6E5E4E3E2E1E0DFDEDDDCDBDAD9D8D7D6D5D4D3D2D1D0CFCECDCCCBCAC9C8C7C6C5C4C3C2C1C0BFBEBDBCBBBAB9B8B7B6B5B4B3B2B1B0AFAEADACABAAA9A8A7A6A5A4A3A2A1A09F9E9D9C9B9A999897969594939291908F8E8D8C8B8A898887868584838281807F7E7D7C7B7A797877767574737271706F6E6D6C6B6A696867666564636261605F5E5D5C5B5A595857565554535251504F4E4D4C4B4A494847464544434241403F3E3D3C3B3A393837363534333231302F2E2D2C2B2A292827262524232221201F1E1D1C1B1A191817161514131211100F0E0D0C0B0A09080706050403020100>0 %_Br[0 0 50 100 %_BS%_0 0 50 100 Bs1 0 50 0 %_BS%_1 0 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Red & Yellow)(Red & Yellow) 0 2 Bd[0<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><FFFFFEFEFDFDFDFCFCFBFBFBFAFAF9F9F9F8F8F7F7F7F6F6F5F5F5F4F4F3F3F3F2F2F1F1F1F0F0EFEFEFEEEEEDEDEDECECEBEBEBEAEAE9E9E9E8E8E7E7E7E6E6E5E5E5E4E4E3E3E3E2E2E1E1E1E0E0DFDFDFDEDEDDDDDDDCDCDBDBDBDADAD9D9D9D8D8D7D7D7D6D6D5D5D5D4D4D3D3D3D2D2D1D1D1D0D0CFCFCFCECECDCDCDCCCCCBCBCBCACAC9C9C9C8C8C7C7C7C6C6C5C5C5C4C4C3C3C3C2C2C1C1C1C0C0BFBFBFBEBEBDBDBDBCBCBBBBBBBABAB9B9B9B8B8B7B7B7B6B6B5B5B5B4B4B3B3B3B2B2B1B1B1B0B0AFAFAFAEAEADADADACACABABABAAAAA9A9A9A8A8A7A7A7A6A6A5A5A5A4A4A3A3A3A2A2A1A1A1A0A09F9F9F9E9E9D9D9D9C9C9B9B9B9A9A9999>01 %_Br[0 1 0.6 0 1 50 100 %_BS%_0 1 0.6 0 1 50 100 Bs0 0 1 0 1 50 0 %_BS%_0 0 1 0 1 50 0 BsBD%AI5_EndGradient%AI5_BeginGradient: (Yellow & Blue Radial)(Yellow & Blue Radial) 1 2 Bd[<000102030405060708090A0B0C0D0E0F101112131415161718191A1B1C1D1E1F202122232425262728292A2B2C2D2E2F303132333435363738393A3B3C3D3E3F404142434445464748494A4B4C4D4E4F505152535455565758595A5B5C5D5E5F606162636465666768696A6B6C6D6E6F707172737475767778797A7B7C7D7E7F808182838485868788898A8B8C8D8E8F909192939495969798999A9B9C9D9E9FA0A1A2A3A4A5A6A7A8A9AAABACADAEAFB0B1B2B3B4B5B6B7B8B9BABBBCBDBEBFC0C1C2C3C4C5C6C7C8C9CACBCCCDCECFD0D1D2D3D4D5D6D7D8D9DADBDCDDDEDFE0E1E2E3E4E5E6E7E8E9EAEBECEDEEEFF0F1F2F3F4F5F6F7F8F9FAFBFCFDFEFF><1415161718191A1B1C1D1E1F1F202122232425262728292A2A2B2C2D2E2F30313233343536363738393A3B3C3D3E3F40414142434445464748494A4B4C4D4D4E4F50515253545556575858595A5B5C5D5E5F60616263646465666768696A6B6C6D6E6F6F707172737475767778797A7B7B7C7D7E7F80818283848586868788898A8B8C8D8E8F90919292939495969798999A9B9C9D9D9E9FA0A1A2A3A4A5A6A7A8A9A9AAABACADAEAFB0B1B2B3B4B4B5B6B7B8B9BABBBCBDBEBFC0C0C1C2C3C4C5C6C7C8C9CACBCBCCCDCECFD0D1D2D3D4D5D6D7D7D8D9DADBDCDDDEDFE0E1E2E2E3E4E5E6E7E8E9EAEBECEDEEEEEFF0F1F2F3F4F5F6F7F8F9F9FAFBFCFDFEFF><ABAAAAA9A8A8A7A6A5A5A4A3A3A2A1A1A09F9F9E9D9D9C9B9B9A9999989797969595949393929191908F8F8E8D8D8C8B8B8A8989888787868585848383828181807F7F7E7D7D7C7B7B7A7979787777767575747373727171706F6F6E6D6D6C6B6B6A6969686767666564646362626160605F5E5E5D5C5C5B5A5A5958585756565554545352525150504F4E4E4D4C4C4B4A4A4948484746464544444342424140403F3E3E3D3C3C3B3A3A3938383736363534343332323130302F2E2E2D2C2C2B2A2A29282827262625242423222121201F1F1E1D1D1C1B1B1A1919181717161515141313121111100F0F0E0D0D0C0B0B0A090908070706050504030302010100>01 %_Br[0 0.08 0.67 0 1 50 14 %_BS%_0 0.08 0.67 0 1 50 14 Bs1 1 0 0 1 50 100 %_BS%_1 1 0 0 1 50 100 BsBD%AI5_EndGradient%AI5_End_NonPrinting--%AI5_BeginPalette0 0 Pb1 1 1 1 ([Registration]) 0 Xs([Registration]) Pc1 g(K=0) Pc0 g(K=100) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.75 g(K=25) Pc0.5 g(K=50) Pc0.25 g(K=75) Pc0 g(K=100) PcBb2 (Black & White) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BB(Black & White) Pc0.25 0 0 0 k(C=25 M=0 Y=0 K=0) Pc0.5 0 0 0 k(C=50 M=0 Y=0 K=0) Pc0.75 0 0 0 k(C=75 M=0 Y=0 K=0) Pc1 0 0 0 k(C=100 M=0 Y=0 K=0) Pc0.25 0.25 0 0 k(C=25 M=25 Y=0 K=0) Pc0.5 0.5 0 0 k(C=50 M=50 Y=0 K=0) Pc0.75 0.75 0 0 k(C=75 M=75 Y=0 K=0) Pc1 1 0 0 k(C=100 M=100 Y=0 K=0) PcBb2 (Red & Yellow) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BB(Red & Yellow) Pc0 0.25 0 0 k(C=0 M=25 Y=0 K=0) Pc0 0.5 0 0 k(C=0 M=50 Y=0 K=0) Pc0 0.75 0 0 k(C=0 M=75 Y=0 K=0) Pc0 1 0 0 k(C=0 M=100 Y=0 K=0) Pc0 0.25 0.25 0 k(C=0 M=25 Y=25 K=0) Pc0 0.5 0.5 0 k(C=0 M=50 Y=50 K=0) Pc0 0.75 0.75 0 k(C=0 M=75 Y=75 K=0) Pc0 1 1 0 k(C=0 M=100 Y=100 K=0) PcBb0 0 0 0 Bh2 (Yellow & Blue Radial) -4014 4716 0 0 1 0 0 1 0 0 Bg0 BB(Yellow & Blue Radial) Pc0 0 0.25 0 k(C=0 M=0 Y=25 K=0) Pc0 0 0.5 0 k(C=0 M=0 Y=50 K=0) Pc0 0 0.75 0 k(C=0 M=0 Y=75 K=0) Pc0 0 1 0 k(C=0 M=0 Y=100 K=0) Pc0.25 0 0.25 0 k(C=25 M=0 Y=25 K=0) Pc0.5 0 0.5 0 k(C=50 M=0 Y=50 K=0) Pc0.75 0 0.75 0 k(C=75 M=0 Y=75 K=0) Pc1 0 1 0 k(C=100 M=0 Y=100 K=0) Pc(Yellow Stripe) 0 0 1 1 0 0 0 0 0 [1 0 0 1 0 0] p(Yellow Stripe) Pc0.25 0.125 0 0 k(C=25 M=13 Y=0 K=0) Pc0.5 0.25 0 0 k(C=50 M=25 Y=0 K=0) Pc0.75 0.375 0 0 k(C=75 M=38 Y=0 K=0) Pc1 0.5 0 0 k(C=100 M=50 Y=0 K=0) Pc0.125 0.25 0 0 k(C=13 M=25 Y=0 K=0) Pc0.25 0.5 0 0 k(C=25 M=50 Y=0 K=0) Pc0.375 0.75 0 0 k(C=38 M=75 Y=0 K=0) Pc0.5 1 0 0 k(C=50 M=100 Y=0 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0 0.25 0.125 0 k(C=0 M=25 Y=13 K=0) Pc0 0.5 0.25 0 k(C=0 M=50 Y=25 K=0) Pc0 0.75 0.375 0 k(C=0 M=75 Y=38 K=0) Pc0 1 0.5 0 k(C=0 M=100 Y=50 K=0) Pc0 0.125 0.25 0 k(C=0 M=13 Y=25 K=0) Pc0 0.25 0.5 0 k(C=0 M=25 Y=50 K=0) Pc0 0.375 0.75 0 k(C=0 M=38 Y=75 K=0) Pc0 0.5 1 0 k(C=0 M=50 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0 0.25 0 k(C=13 M=0 Y=25 K=0) Pc0.25 0 0.5 0 k(C=25 M=0 Y=50 K=0) Pc0.375 0 0.75 0 k(C=38 M=0 Y=75 K=0) Pc0.5 0 1 0 k(C=50 M=0 Y=100 K=0) Pc0.25 0 0.125 0 k(C=25 M=0 Y=13 K=0) Pc0.5 0 0.25 0 k(C=50 M=0 Y=25 K=0) Pc0.75 0 0.375 0 k(C=75 M=0 Y=38 K=0) Pc1 0 0.5 0 k(C=100 M=0 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.25 0.125 0.125 0 k(C=25 M=13 Y=13 K=0) Pc0.5 0.25 0.25 0 k(C=50 M=25 Y=25 K=0) Pc0.75 0.375 0.375 0 k(C=75 M=38 Y=38 K=0) Pc1 0.5 0.5 0 k(C=100 M=50 Y=50 K=0) Pc0.25 0.25 0.125 0 k(C=25 M=25 Y=13 K=0) Pc0.5 0.5 0.25 0 k(C=50 M=50 Y=25 K=0) Pc0.75 0.75 0.375 0 k(C=75 M=75 Y=38 K=0) Pc1 1 0.5 0 k(C=100 M=100 Y=50 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.25 0.125 0 k(C=13 M=25 Y=13 K=0) Pc0.25 0.5 0.25 0 k(C=25 M=50 Y=25 K=0) Pc0.375 0.75 0.375 0 k(C=38 M=75 Y=38 K=0) Pc0.5 1 0.5 0 k(C=50 M=100 Y=50 K=0) Pc0.125 0.25 0.25 0 k(C=13 M=25 Y=25 K=0) Pc0.25 0.5 0.5 0 k(C=25 M=50 Y=50 K=0) Pc0.375 0.75 0.75 0 k(C=38 M=75 Y=75 K=0) Pc0.5 1 1 0 k(C=50 M=100 Y=100 K=0) Pc0 0 0 0 k(C=0 M=0 Y=0 K=0) Pc0.125 0.125 0.25 0 k(C=13 M=13 Y=25 K=0) Pc0.25 0.25 0.5 0 k(C=25 M=25 Y=50 K=0) Pc0.375 0.375 0.75 0 k(C=38 M=38 Y=75 K=0) Pc0.5 0.5 1 0 k(C=50 M=50 Y=100 K=0) Pc0.25 0.125 0.25 0 k(C=25 M=13 Y=25 K=0) Pc0.5 0.25 0.5 0 k(C=50 M=25 Y=50 K=0) Pc0.75 0.375 0.75 0 k(C=75 M=38 Y=75 K=0) Pc1 0.5 1 0 k(C=100 M=50 Y=100 K=0) PcPB%AI5_EndPalette%AI5_Begin_NonPrintingNp%AI5_End_NonPrinting--%AI5_Begin_NonPrintingNp%AI8_PluginGroupInfo(Adobe Path Blends) (Adobe Blends Plugin) (Live Blends)%AI8_PluginGroupInfo(Adobe PatternOnPath Brush Tool) (Adobe Pattern Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe ArtOnPath Brush Tool) (Adobe Art Brush Plugin) (Art Brush Tool)%AI8_PluginGroupInfo(Adobe Calligraphic Brush Tool) (Undo New Calligraphic Brush) (Calligraphic Brush Tool)%AI8_PluginGroupInfo(Adobe Scatter Brush Tool) (Adobe Scatter Brush Plugin) (Scatter Brush Tool)%AI5_End_NonPrinting--%%EndSetup%AI5_BeginLayer1 1 1 1 0 0 1 0 79 128 255 0 100 Lb(Layer 1) Ln0 A0 R0 G800 Ar0 J 0 j 0.75 w 10 M []0 d%AI3_Note:0 D0 XR144 324 m144.1919 325.0938 l144.3838 326.1982 l144.5762 327.3125 l144.7681 328.4375 l144.96 329.5713 l145.1519 330.7148 l145.3438 331.8672 l145.5361 333.0283 l145.728 334.1973 l145.9199 335.3745 l146.1118 336.5591 l146.3042 337.751 l146.4961 338.9492 l146.688 340.1543 l146.8799 341.3652 l147.0718 342.5815 l147.2642 343.8037 l147.4561 345.0303 l147.6479 346.2617 l147.8398 347.4971 l148.0322 348.7368 l148.2241 349.9795 l148.416 351.2256 l148.6079 352.4741 l148.7998 353.7246 l148.9922 354.9775 l149.1841 356.2319 l149.376 357.4873 l149.5679 358.7432 l149.7598 360 l149.9521 361.2568 l150.144 362.5127 l150.3359 363.7681 l150.5278 365.0225 l150.7202 366.2754 l150.9121 367.5259 l151.104 368.7744 l151.2959 370.0205 l151.4878 371.2632 l151.6802 372.5029 l151.8721 373.7383 l152.064 374.9697 l152.2559 376.1963 l152.4482 377.4185 l152.6401 378.6348 l152.832 379.8457 l153.0239 381.0508 l153.2158 382.249 l153.4082 383.4409 l153.6001 384.6255 l153.792 385.8027 l153.9839 386.9717 l154.1758 388.1328 l154.3682 389.2852 l154.5601 390.4287 l154.752 391.5625 l154.9438 392.6875 l155.1362 393.8018 l155.3281 394.9063 l155.52 396 l155.7119 397.0825 l155.9038 398.1543 l156.0962 399.2139 l156.2881 400.2617 l156.48 401.2974 l156.6719 402.3203 l156.8638 403.3306 l157.0562 404.3276 l157.248 405.311 l157.4399 406.2808 l157.6318 407.2363 l157.8242 408.1772 l158.0161 409.104 l158.208 410.0156 l158.3999 410.9116 l158.5918 411.7925 l158.7842 412.6577 l158.9761 413.5063 l159.168 414.3389 l159.3599 415.1553 l159.5518 415.9546 l159.7441 416.7368 l159.936 417.502 l160.1279 418.249 l160.3198 418.979 l160.5122 419.6909 l160.7041 420.3843 l160.896 421.0596 l161.0879 421.7158 l161.2798 422.354 l161.4722 422.9727 l161.6641 423.5723 l161.856 424.1523 l162.0479 424.7134 l162.2402 425.2544 l162.4321 425.7754 l162.624 426.2764 l162.8159 426.7573 l163.0078 427.2178 l163.2002 427.6577 l163.3921 428.0771 l163.584 428.4761 l163.7759 428.854 l163.9678 429.2109 l164.1602 429.5469 l164.3521 429.8613 l164.5439 430.1548 l164.7358 430.4268 l164.9282 430.6772 l165.1201 430.9063 l165.312 431.1138 l165.5039 431.2993 l165.6958 431.4634 l165.8882 431.6055 l166.0801 431.7261 l166.272 431.8247 l166.4639 431.9014 l166.6563 431.9561 l166.8481 431.9893 l167.04 432 l167.2319 431.9893 l167.4238 431.9561 l167.6162 431.9014 l167.8081 431.8247 l168 431.7261 l168.1919 431.6055 l168.3838 431.4634 l168.5762 431.2993 l168.7681 431.1138 l168.96 430.9063 l169.1519 430.6772 l169.3438 430.4268 l169.5361 430.1548 l169.728 429.8613 l169.9199 429.5469 l170.1118 429.2109 l170.3042 428.854 l170.4961 428.4761 l170.688 428.0771 l170.8799 427.6577 l171.0718 427.2178 l171.2642 426.7573 l171.4561 426.2764 l171.6479 425.7754 l171.8398 425.2544 l172.0322 424.7134 l172.2241 424.1523 l172.416 423.5723 l172.6079 422.9727 l172.7998 422.354 l172.9922 421.7158 l173.1841 421.0596 l173.376 420.3843 l173.5679 419.6909 l173.7598 418.979 l173.9521 418.249 l174.144 417.502 l174.3359 416.7368 l174.5278 415.9546 l174.7202 415.1553 l174.9121 414.3389 l175.104 413.5063 l175.2959 412.6577 l175.4878 411.7925 l175.6802 410.9116 l175.8721 410.0156 l176.064 409.104 l176.2559 408.1772 l176.4482 407.2363 l176.6401 406.2808 l176.832 405.311 l177.0239 404.3276 l177.2158 403.3306 l177.4082 402.3203 l177.6001 401.2974 l177.792 400.2617 l177.9839 399.2139 l178.1758 398.1543 l178.3682 397.0825 l178.5601 396 l178.752 394.9063 l178.9438 393.8018 l179.1362 392.6875 l179.3281 391.5625 l179.52 390.4287 l179.7119 389.2852 l179.9038 388.1328 l180.0962 386.9717 l180.2881 385.8027 l180.48 384.6255 l180.6719 383.4409 l180.8638 382.249 l181.0562 381.0508 l181.248 379.8457 l181.4399 378.6348 l181.6318 377.4185 l181.8242 376.1963 l182.0161 374.9697 l182.208 373.7383 l182.3999 372.5029 l182.5918 371.2632 l182.7842 370.0205 l182.9761 368.7744 l183.168 367.5259 l183.3599 366.2754 l183.5518 365.0225 l183.7441 363.7681 l183.936 362.5127 l184.1279 361.2568 l184.3198 360 l184.5122 358.7432 l184.7041 357.4873 l184.896 356.2319 l185.0879 354.9775 l185.2798 353.7246 l185.4722 352.4741 l185.6641 351.2256 l185.856 349.9795 l186.0479 348.7368 l186.2402 347.4971 l186.4321 346.2617 l186.624 345.0303 l186.8159 343.8037 l187.0078 342.5815 l187.2002 341.3652 l187.3921 340.1543 l187.584 338.9492 l187.7759 337.751 l187.9678 336.5591 l188.1602 335.3745 l188.3521 334.1973 l188.5439 333.0283 l188.7358 331.8672 l188.9282 330.7148 l189.1201 329.5713 l189.312 328.4375 l189.5039 327.3125 l189.6958 326.1982 l189.8882 325.0938 l190.0801 324 l190.272 322.9175 l190.4639 321.8457 l190.6563 320.7861 l190.8481 319.7383 l191.04 318.7026 l191.2319 317.6792 l191.4238 316.6694 l191.6162 315.6724 l191.8081 314.689 l192 313.7192 l192.1919 312.7637 l192.3838 311.8228 l192.5762 310.896 l192.7681 309.9844 l192.96 309.0884 l193.1519 308.2075 l193.3438 307.3423 l193.5361 306.4937 l193.728 305.6611 l193.9199 304.8447 l194.1118 304.0454 l194.3042 303.2632 l194.4961 302.498 l194.688 301.751 l194.8799 301.021 l195.0718 300.3091 l195.2642 299.6157 l195.4561 298.9404 l195.6479 298.2837 l195.8398 297.646 l196.0322 297.0273 l196.2241 296.4277 l196.416 295.8477 l196.6079 295.2866 l196.7998 294.7456 l196.9922 294.2246 l197.1841 293.7236 l197.376 293.2427 l197.5679 292.7822 l197.7598 292.3423 l197.9521 291.9229 l198.144 291.5239 l198.3359 291.146 l198.5278 290.7891 l198.7202 290.4531 l198.9121 290.1387 l199.104 289.8452 l199.2959 289.5732 l199.4878 289.3228 l199.6802 289.0938 l199.8721 288.8862 l200.064 288.7007 l200.2559 288.5366 l200.4482 288.3945 l200.6401 288.2739 l200.832 288.1753 l201.0239 288.0986 l201.2158 288.0439 l201.4082 288.0107 l201.6001 288 l201.792 288.0107 l201.9839 288.0439 l202.1758 288.0986 l202.3682 288.1753 l202.5601 288.2739 l202.752 288.3945 l202.9438 288.5366 l203.1362 288.7007 l203.3281 288.8862 l203.52 289.0938 l203.7119 289.3228 l203.9038 289.5732 l204.0962 289.8452 l204.2881 290.1387 l204.48 290.4531 l204.6719 290.7891 l204.8638 291.146 l205.0562 291.5239 l205.248 291.9229 l205.4399 292.3423 l205.6318 292.7822 l205.8242 293.2427 l206.0161 293.7236 l206.208 294.2246 l206.3999 294.7456 l206.5918 295.2866 l206.7842 295.8477 l206.9761 296.4277 l207.168 297.0273 l207.3599 297.646 l207.5518 298.2837 l207.7441 298.9404 l207.936 299.6157 l208.1279 300.3091 l208.3198 301.021 l208.5122 301.751 l208.7041 302.498 l208.896 303.2632 l209.0879 304.0454 l209.2798 304.8447 l209.4722 305.6611 l209.6641 306.4937 l209.856 307.3423 l210.0479 308.2075 l210.2402 309.0884 l210.4321 309.9844 l210.624 310.896 l210.8159 311.8228 l211.0078 312.7637 l211.2002 313.7192 l211.3921 314.689 l211.584 315.6724 l211.7759 316.6694 l211.9678 317.6792 l212.1602 318.7026 l212.3521 319.7383 l212.5439 320.7861 l212.7358 321.8457 l212.9282 322.9175 l213.1201 324 l213.312 325.0938 l213.5039 326.1982 l213.6958 327.3125 l213.8882 328.4375 l214.0801 329.5713 l214.272 330.7148 l214.4639 331.8672 l214.6563 333.0283 l214.8481 334.1973 l215.04 335.3745 l215.2319 336.5591 l215.4238 337.751 l215.6162 338.9492 l215.8081 340.1543 l216 341.3652 l216.1919 342.5815 l216.3838 343.8037 l216.5762 345.0303 l216.7681 346.2617 l216.96 347.4971 l217.1519 348.7368 l217.3438 349.9795 l217.5361 351.2256 l217.728 352.4741 l217.9199 353.7246 l218.1118 354.9775 l218.3042 356.2319 l218.4961 357.4873 l218.688 358.7432 l218.8799 360 l219.0718 361.2568 l219.2642 362.5127 l219.4561 363.7681 l219.6479 365.0225 l219.8398 366.2754 l220.0322 367.5259 l220.2241 368.7744 l220.416 370.0205 l220.6079 371.2632 l220.7998 372.5029 l220.9922 373.7383 l221.1841 374.9697 l221.376 376.1963 l221.5679 377.4185 l221.7598 378.6348 l221.9521 379.8457 l222.144 381.0508 l222.3359 382.249 l222.5278 383.4409 l222.7202 384.6255 l222.9121 385.8027 l223.104 386.9717 l223.2959 388.1328 l223.4878 389.2852 l223.6802 390.4287 l223.8721 391.5625 l224.064 392.6875 l224.2559 393.8018 l224.4482 394.9063 l224.6401 396 l224.832 397.0825 l225.0239 398.1543 l225.2158 399.2139 l225.4082 400.2617 l225.6001 401.2974 l225.792 402.3203 l225.9839 403.3306 l226.1758 404.3276 l226.3682 405.311 l226.5601 406.2808 l226.752 407.2363 l226.9438 408.1772 l227.1362 409.104 l227.3281 410.0156 l227.52 410.9116 l227.7119 411.7925 l227.9038 412.6577 l228.0962 413.5063 l228.2881 414.3389 l228.48 415.1553 l228.6719 415.9546 l228.8638 416.7368 l229.0562 417.502 l229.248 418.249 l229.4399 418.979 l229.6318 419.6909 l229.8242 420.3843 l230.0161 421.0596 l230.208 421.7158 l230.3999 422.354 l230.5918 422.9727 l230.7842 423.5723 l230.9761 424.1523 l231.168 424.7134 l231.3599 425.2544 l231.5518 425.7754 l231.7441 426.2764 l231.936 426.7573 l232.1279 427.2178 l232.3198 427.6577 l232.5122 428.0771 l232.7041 428.4761 l232.896 428.854 l233.0879 429.2109 l233.2798 429.5469 l233.4722 429.8613 l233.6641 430.1548 l233.856 430.4268 l234.0479 430.6772 l234.2402 430.9063 l234.4321 431.1138 l234.624 431.2993 l234.8159 431.4634 l235.0078 431.6055 l235.2002 431.7261 l235.3921 431.8247 l235.584 431.9014 l235.7759 431.9561 l235.9678 431.9893 l236.1602 432 l236.3521 431.9893 l236.5439 431.9561 l236.7358 431.9014 l236.9282 431.8247 l237.1201 431.7261 l237.312 431.6055 l237.5039 431.4634 l237.6958 431.2993 l237.8882 431.1138 l238.0801 430.9063 l238.272 430.6772 l238.4639 430.4268 l238.6563 430.1548 l238.8481 429.8613 l239.04 429.5469 l239.2319 429.2109 l239.4238 428.854 l239.6162 428.4761 l239.8081 428.0771 l240 427.6577 l240.1919 427.2178 l240.3838 426.7573 l240.5762 426.2764 l240.7681 425.7754 l240.96 425.2544 l241.1519 424.7134 l241.3438 424.1523 l241.5361 423.5723 l241.728 422.9727 l241.9199 422.354 l242.1118 421.7158 l242.3042 421.0596 l242.4961 420.3843 l242.688 419.6909 l242.8799 418.979 l243.0718 418.249 l243.2642 417.502 l243.4561 416.7368 l243.6479 415.9546 l243.8398 415.1553 l244.0322 414.3389 l244.2241 413.5063 l244.416 412.6577 l244.6079 411.7925 l244.7998 410.9116 l244.9922 410.0156 l245.1841 409.104 l245.376 408.1772 l245.5679 407.2363 l245.7598 406.2808 l245.9521 405.311 l246.144 404.3276 l246.3359 403.3306 l246.5278 402.3203 l246.7202 401.2974 l246.9121 400.2617 l247.104 399.2139 l247.2959 398.1543 l247.4878 397.0825 l247.6802 396 l247.8721 394.9063 l248.064 393.8018 l248.2559 392.6875 l248.4482 391.5625 l248.6401 390.4287 l248.832 389.2852 l249.0239 388.1328 l249.2158 386.9717 l249.4082 385.8027 l249.6001 384.6255 l249.792 383.4409 l249.9839 382.249 l250.1758 381.0508 l250.3682 379.8457 l250.5601 378.6348 l250.752 377.4185 l250.9438 376.1963 l251.1362 374.9697 l251.3281 373.7383 l251.52 372.5029 l251.7119 371.2632 l251.9038 370.0205 l252.0962 368.7744 l252.2881 367.5259 l252.48 366.2754 l252.6719 365.0225 l252.8638 363.7681 l253.0562 362.5127 l253.248 361.2568 l253.4399 360 l253.6318 358.7432 l253.8242 357.4873 l254.0161 356.2319 l254.208 354.9775 l254.3999 353.7246 l254.5918 352.4741 l254.7842 351.2256 l254.9761 349.9795 l255.168 348.7368 l255.3599 347.4971 l255.5518 346.2617 l255.7441 345.0303 l255.936 343.8037 l256.1279 342.5815 l256.3198 341.3652 l256.5122 340.1543 l256.7041 338.9492 l256.896 337.751 l257.0879 336.5591 l257.2798 335.3745 l257.4722 334.1973 l257.6641 333.0283 l257.856 331.8672 l258.0479 330.7148 l258.2402 329.5713 l258.4321 328.4375 l258.624 327.3125 l258.8159 326.1982 l259.0078 325.0938 l259.2002 324 l259.3921 322.9175 l259.584 321.8457 l259.7759 320.7861 l259.9678 319.7383 l260.1602 318.7026 l260.3521 317.6792 l260.5439 316.6694 l260.7358 315.6724 l260.9282 314.689 l261.1201 313.7192 l261.312 312.7637 l261.5039 311.8228 l261.6958 310.896 l261.8882 309.9844 l262.0801 309.0884 l262.272 308.2075 l262.4639 307.3423 l262.6563 306.4937 l262.8481 305.6611 l263.04 304.8447 l263.2319 304.0454 l263.4238 303.2632 l263.6162 302.498 l263.8081 301.751 l264 301.021 l264.1919 300.3091 l264.3838 299.6157 l264.5762 298.9404 l264.7681 298.2837 l264.96 297.646 l265.1519 297.0273 l265.3438 296.4277 l265.5361 295.8477 l265.728 295.2866 l265.9199 294.7456 l266.1118 294.2246 l266.3042 293.7236 l266.4961 293.2427 l266.688 292.7822 l266.8799 292.3423 l267.0718 291.9229 l267.2642 291.5239 l267.4561 291.146 l267.6479 290.7891 l267.8398 290.4531 l268.0322 290.1387 l268.2241 289.8452 l268.416 289.5732 l268.6079 289.3228 l268.7998 289.0938 l268.9922 288.8862 l269.1841 288.7007 l269.376 288.5366 l269.5679 288.3945 l269.7598 288.2739 l269.9521 288.1753 l270.144 288.0986 l270.3359 288.0439 l270.5278 288.0107 l270.7202 288 l270.9121 288.0107 l271.104 288.0439 l271.2959 288.0986 l271.4878 288.1753 l271.6802 288.2739 l271.8721 288.3945 l272.064 288.5366 l272.2559 288.7007 l272.4482 288.8862 l272.6401 289.0938 l272.832 289.3228 l273.0239 289.5732 l273.2158 289.8452 l273.4082 290.1387 l273.6001 290.4531 l273.792 290.7891 l273.9839 291.146 l274.1758 291.5239 l274.3682 291.9229 l274.5601 292.3423 l274.752 292.7822 l274.9438 293.2427 l275.1357 293.7236 l275.3281 294.2246 l275.52 294.7456 l275.7119 295.2866 l275.9038 295.8477 l276.0962 296.4277 l276.2881 297.0273 l276.48 297.646 l276.6719 298.2837 l276.8643 298.9404 l277.0562 299.6157 l277.248 300.3091 l277.4399 301.021 l277.6318 301.751 l277.8242 302.498 l278.0161 303.2632 l278.208 304.0454 l278.3999 304.8447 l278.5918 305.6611 l278.7842 306.4937 l278.9761 307.3423 l279.168 308.2075 l279.3599 309.0884 l279.5518 309.9844 l279.7441 310.896 l279.936 311.8228 l280.1279 312.7637 l280.3198 313.7192 l280.5122 314.689 l280.7041 315.6724 l280.896 316.6694 l281.0879 317.6792 l281.2798 318.7026 l281.4722 319.7383 l281.6641 320.7861 l281.856 321.8457 l282.0479 322.9175 l282.2402 324 l282.4321 325.0938 l282.624 326.1982 l282.8159 327.3125 l283.0078 328.4375 l283.2002 329.5713 l283.3921 330.7148 l283.584 331.8672 l283.7759 333.0283 l283.9678 334.1973 l284.1602 335.3745 l284.3521 336.5591 l284.5439 337.751 l284.7358 338.9492 l284.9282 340.1543 l285.1201 341.3652 l285.312 342.5815 l285.5039 343.8037 l285.6958 345.0303 l285.8882 346.2617 l286.0801 347.4971 l286.272 348.7368 l286.4639 349.9795 l286.6563 351.2256 l286.8481 352.4741 l287.04 353.7246 l287.2319 354.9775 l287.4238 356.2319 l287.6162 357.4873 l287.8081 358.7432 l288 360 l288.1919 361.2568 l288.3838 362.5127 l288.5762 363.7681 l288.7681 365.0225 l288.96 366.2754 l289.1519 367.5259 l289.3438 368.7744 l289.5361 370.0205 l289.728 371.2632 l289.9199 372.5029 l290.1118 373.7383 l290.3042 374.9697 l290.4961 376.1963 l290.688 377.4185 l290.8799 378.6348 l291.0718 379.8457 l291.2642 381.0508 l291.4561 382.249 l291.6479 383.4409 l291.8398 384.6255 l292.0322 385.8027 l292.2241 386.9717 l292.416 388.1328 l292.6079 389.2852 l292.7998 390.4287 l292.9922 391.5625 l293.1841 392.6875 l293.376 393.8018 l293.5679 394.9063 l293.7598 396 l293.9521 397.0825 l294.144 398.1543 l294.3359 399.2139 l294.5278 400.2617 l294.7202 401.2974 l294.9121 402.3203 l295.104 403.3306 l295.2959 404.3276 l295.4878 405.311 l295.6802 406.2808 l295.8721 407.2363 l296.064 408.1772 l296.2559 409.104 l296.4482 410.0156 l296.6401 410.9116 l296.832 411.7925 l297.0239 412.6577 l297.2158 413.5063 l297.4082 414.3389 l297.6001 415.1553 l297.792 415.9546 l297.9839 416.7368 l298.1758 417.502 l298.3682 418.249 l298.5601 418.979 l298.752 419.6909 l298.9438 420.3843 l299.1357 421.0596 l299.3281 421.7158 l299.52 422.354 l299.7119 422.9727 l299.9038 423.5723 l300.0962 424.1523 l300.2881 424.7134 l300.48 425.2544 l300.6719 425.7754 l300.8643 426.2764 l301.0562 426.7573 l301.248 427.2178 l301.4399 427.6577 l301.6318 428.0771 l301.8242 428.4761 l302.0161 428.854 l302.208 429.2109 l302.3999 429.5469 l302.5918 429.8613 l302.7842 430.1548 l302.9761 430.4268 l303.168 430.6772 l303.3599 430.9063 l303.5518 431.1138 l303.7441 431.2993 l303.936 431.4634 l304.1279 431.6055 l304.3198 431.7261 l304.5122 431.8247 l304.7041 431.9014 l304.896 431.9561 l305.0879 431.9893 l305.2798 432 l305.4722 431.9893 l305.6641 431.9561 l305.856 431.9014 l306.0479 431.8247 l306.2402 431.7261 l306.4321 431.6055 l306.624 431.4634 l306.8159 431.2993 l307.0078 431.1138 l307.2002 430.9063 l307.3921 430.6772 l307.584 430.4268 l307.7759 430.1548 l307.9678 429.8613 l308.1602 429.5469 l308.3521 429.2109 l308.5439 428.854 l308.7358 428.4761 l308.9282 428.0771 l309.1201 427.6577 l309.312 427.2178 l309.5039 426.7573 l309.6958 426.2764 l309.8882 425.7754 l310.0801 425.2544 l310.272 424.7134 l310.4639 424.1523 l310.6563 423.5723 l310.8481 422.9727 l311.04 422.354 l311.2319 421.7158 l311.4238 421.0596 l311.6162 420.3843 l311.8081 419.6909 l312 418.979 l312.1919 418.249 l312.3838 417.502 l312.5762 416.7368 l312.7681 415.9546 l312.96 415.1553 l313.1519 414.3389 l313.3438 413.5063 l313.5361 412.6577 l313.728 411.7925 l313.9199 410.9116 l314.1118 410.0156 l314.3042 409.104 l314.4961 408.1772 l314.688 407.2363 l314.8799 406.2808 l315.0718 405.311 l315.2642 404.3276 l315.4561 403.3306 l315.6479 402.3203 l315.8398 401.2974 l316.0322 400.2617 l316.2241 399.2139 l316.416 398.1543 l316.6079 397.0825 l316.7998 396 l316.9922 394.9063 l317.1841 393.8018 l317.376 392.6875 l317.5679 391.5625 l317.7598 390.4287 l317.9521 389.2852 l318.144 388.1328 l318.3359 386.9717 l318.5278 385.8027 l318.7202 384.6255 l318.9121 383.4409 l319.104 382.249 l319.2959 381.0508 l319.4878 379.8457 l319.6802 378.6348 l319.8721 377.4185 l320.064 376.1963 l320.2559 374.9697 l320.4482 373.7383 l320.6401 372.5029 l320.832 371.2632 l321.0239 370.0205 l321.2158 368.7744 l321.4082 367.5259 l321.6001 366.2754 l321.792 365.0225 l321.9839 363.7681 l322.1758 362.5127 l322.3682 361.2568 l322.5601 360 l322.752 358.7432 l322.9438 357.4873 l323.1357 356.2319 l323.3281 354.9775 l323.52 353.7246 l323.7119 352.4741 l323.9038 351.2256 l324.0962 349.9795 l324.2881 348.7368 l324.48 347.4971 l324.6719 346.2617 l324.8643 345.0303 l325.0562 343.8037 l325.248 342.5815 l325.4399 341.3652 l325.6318 340.1543 l325.8242 338.9492 l326.0161 337.751 l326.208 336.5591 l326.3999 335.3745 l326.5918 334.1973 l326.7842 333.0283 l326.9761 331.8672 l327.168 330.7148 l327.3599 329.5713 l327.5518 328.4375 l327.7441 327.3125 l327.936 326.1982 l328.1279 325.0938 l328.3198 324 l328.5122 322.9175 l328.7041 321.8457 l328.896 320.7861 l329.0879 319.7383 l329.2798 318.7026 l329.4722 317.6792 l329.6641 316.6694 l329.856 315.6724 l330.0479 314.689 l330.2402 313.7192 l330.4321 312.7637 l330.624 311.8228 l330.8159 310.896 l331.0078 309.9844 l331.2002 309.0884 l331.3921 308.2075 l331.584 307.3423 l331.7759 306.4937 l331.9678 305.6611 l332.1602 304.8447 l332.3521 304.0454 l332.5439 303.2632 l332.7358 302.498 l332.9282 301.751 l333.1201 301.021 l333.312 300.3091 l333.5039 299.6157 l333.6958 298.9404 l333.8882 298.2837 l334.0801 297.646 l334.272 297.0273 l334.4639 296.4277 l334.6563 295.8477 l334.8481 295.2866 l335.04 294.7456 l335.2319 294.2246 l335.4238 293.7236 l335.6162 293.2427 l335.8081 292.7822 l336 292.3423 l336.1919 291.9229 l336.3838 291.5239 l336.5762 291.146 l336.7681 290.7891 l336.96 290.4531 l337.1519 290.1387 l337.3438 289.8452 l337.5361 289.5732 l337.728 289.3228 l337.9199 289.0938 l338.1118 288.8862 l338.3042 288.7007 l338.4961 288.5366 l338.688 288.3945 l338.8799 288.2739 l339.0718 288.1753 l339.2642 288.0986 l339.4561 288.0439 l339.6479 288.0107 l339.8398 288 l340.0322 288.0107 l340.2241 288.0439 l340.416 288.0986 l340.6079 288.1753 l340.7998 288.2739 l340.9922 288.3945 l341.1841 288.5366 l341.376 288.7007 l341.5679 288.8862 l341.7598 289.0938 l341.9521 289.3228 l342.144 289.5732 l342.3359 289.8452 l342.5278 290.1387 l342.7202 290.4531 l342.9121 290.7891 l343.104 291.146 l343.2959 291.5239 l343.4878 291.9229 l343.6802 292.3423 l343.8721 292.7822 l344.064 293.2427 l344.2559 293.7236 l344.4482 294.2246 l344.6401 294.7456 l344.832 295.2866 l345.0239 295.8477 l345.2158 296.4277 l345.4082 297.0273 l345.6001 297.646 l345.792 298.2837 l345.9839 298.9404 l346.1758 299.6157 l346.3682 300.3091 l346.5601 301.021 l346.752 301.751 l346.9438 302.498 l347.1357 303.2632 l347.3281 304.0454 l347.52 304.8447 l347.7119 305.6611 l347.9038 306.4937 l348.0962 307.3423 l348.2881 308.2075 l348.48 309.0884 l348.6719 309.9844 l348.8643 310.896 l349.0562 311.8228 l349.248 312.7637 l349.4399 313.7192 l349.6318 314.689 l349.8242 315.6724 l350.0161 316.6694 l350.208 317.6792 l350.3999 318.7026 l350.5918 319.7383 l350.7842 320.7861 l350.9761 321.8457 l351.168 322.9175 l351.3599 324 l351.5518 325.0938 l351.7441 326.1982 l351.936 327.3125 l352.1279 328.4375 l352.3198 329.5713 l352.5122 330.7148 l352.7041 331.8672 l352.896 333.0283 l353.0879 334.1973 l353.2798 335.3745 l353.4722 336.5591 l353.6641 337.751 l353.856 338.9492 l354.0479 340.1543 l354.2402 341.3652 l354.4321 342.5815 l354.624 343.8037 l354.8159 345.0303 l355.0078 346.2617 l355.2002 347.4971 l355.3921 348.7368 l355.584 349.9795 l355.7759 351.2256 l355.9678 352.4741 l356.1602 353.7246 l356.3521 354.9775 l356.5439 356.2319 l356.7358 357.4873 l356.9282 358.7432 l357.1201 360 l357.312 361.2568 l357.5039 362.5127 l357.6958 363.7681 l357.8882 365.0225 l358.0801 366.2754 l358.272 367.5259 l358.4639 368.7744 l358.6563 370.0205 l358.8481 371.2632 l359.04 372.5029 l359.2319 373.7383 l359.4238 374.9697 l359.6162 376.1963 l359.8081 377.4185 l360 378.6348 l360.1919 379.8457 l360.3838 381.0508 l360.5762 382.249 l360.7681 383.4409 l360.96 384.6255 l361.1519 385.8027 l361.3438 386.9717 l361.5361 388.1328 l361.728 389.2852 l361.9199 390.4287 l362.1118 391.5625 l362.3042 392.6875 l362.4961 393.8018 l362.688 394.9063 l362.8799 396 l363.0718 397.0825 l363.2642 398.1543 l363.4561 399.2139 l363.6479 400.2617 l363.8398 401.2974 l364.0322 402.3203 l364.2241 403.3306 l364.416 404.3276 l364.6079 405.311 l364.7998 406.2808 l364.9922 407.2363 l365.1841 408.1772 l365.376 409.104 l365.5679 410.0156 l365.7598 410.9116 l365.9521 411.7925 l366.144 412.6577 l366.3359 413.5063 l366.5278 414.3389 l366.7202 415.1553 l366.9121 415.9546 l367.104 416.7368 l367.2959 417.502 l367.4878 418.249 l367.6802 418.979 l367.8721 419.6909 l368.064 420.3843 l368.2559 421.0596 l368.4482 421.7158 l368.6401 422.354 l368.832 422.9727 l369.0239 423.5723 l369.2158 424.1523 l369.4082 424.7134 l369.6001 425.2544 l369.792 425.7754 l369.9839 426.2764 l370.1758 426.7573 l370.3682 427.2178 l370.5601 427.6577 l370.752 428.0771 l370.9438 428.4761 l371.1357 428.854 l371.3281 429.2109 l371.52 429.5469 l371.7119 429.8613 l371.9038 430.1548 l372.0962 430.4268 l372.2881 430.6772 l372.48 430.9063 l372.6719 431.1138 l372.8643 431.2993 l373.0562 431.4634 l373.248 431.6055 l373.4399 431.7261 l373.6318 431.8247 l373.8242 431.9014 l374.0161 431.9561 l374.208 431.9893 l374.3999 432 l374.5918 431.9893 l374.7842 431.9561 l374.9761 431.9014 l375.168 431.8247 l375.3599 431.7261 l375.5518 431.6055 l375.7441 431.4634 l375.936 431.2993 l376.1279 431.1138 l376.3198 430.9063 l376.5122 430.6772 l376.7041 430.4268 l376.896 430.1548 l377.0879 429.8613 l377.2798 429.5469 l377.4722 429.2109 l377.6641 428.854 l377.856 428.4761 l378.0479 428.0771 l378.2402 427.6577 l378.4321 427.2178 l378.624 426.7573 l378.8159 426.2764 l379.0078 425.7754 l379.2002 425.2544 l379.3921 424.7134 l379.584 424.1523 l379.7759 423.5723 l379.9678 422.9727 l380.1602 422.354 l380.3521 421.7158 l380.5439 421.0596 l380.7358 420.3843 l380.9282 419.6909 l381.1201 418.979 l381.312 418.249 l381.5039 417.502 l381.6958 416.7368 l381.8882 415.9546 l382.0801 415.1553 l382.272 414.3389 l382.4639 413.5063 l382.6563 412.6577 l382.8481 411.7925 l383.04 410.9116 l383.2319 410.0156 l383.4238 409.104 l383.6162 408.1772 l383.8081 407.2363 l384 406.2808 l384.1919 405.311 l384.3838 404.3276 l384.5762 403.3306 l384.7681 402.3203 l384.96 401.2974 l385.1519 400.2617 l385.3438 399.2139 l385.5361 398.1543 l385.728 397.0825 l385.9199 396 l386.1118 394.9063 l386.3042 393.8018 l386.4961 392.6875 l386.688 391.5625 l386.8799 390.4287 l387.0718 389.2852 l387.2642 388.1328 l387.4561 386.9717 l387.6479 385.8027 l387.8398 384.6255 l388.0322 383.4409 l388.2241 382.249 l388.416 381.0508 l388.6079 379.8457 l388.7998 378.6348 l388.9922 377.4185 l389.1841 376.1963 l389.376 374.9697 l389.5679 373.7383 l389.7598 372.5029 l389.9521 371.2632 l390.144 370.0205 l390.3359 368.7744 l390.5278 367.5259 l390.7202 366.2754 l390.9121 365.0225 l391.104 363.7681 l391.2959 362.5127 l391.4878 361.2568 l391.6802 360 l391.8721 358.7432 l392.064 357.4873 l392.2559 356.2319 l392.4482 354.9775 l392.6401 353.7246 l392.832 352.4741 l393.0239 351.2256 l393.2158 349.9795 l393.4082 348.7368 l393.6001 347.4971 l393.792 346.2617 l393.9839 345.0303 l394.1758 343.8037 l394.3682 342.5815 l394.5601 341.3652 l394.752 340.1543 l394.9438 338.9492 l395.1357 337.751 l395.3281 336.5591 l395.52 335.3745 l395.7119 334.1973 l395.9038 333.0283 l396.0962 331.8672 l396.2881 330.7148 l396.48 329.5713 l396.6719 328.4375 l396.8643 327.3125 l397.0562 326.1982 l397.248 325.0938 l397.4399 324 l397.6318 322.9175 l397.8242 321.8457 l398.0161 320.7861 l398.208 319.7383 l398.3999 318.7026 l398.5918 317.6792 l398.7842 316.6694 l398.9761 315.6724 l399.168 314.689 l399.3599 313.7192 l399.5518 312.7637 l399.7441 311.8228 l399.936 310.896 l400.1279 309.9844 l400.3198 309.0884 l400.5122 308.2075 l400.7041 307.3423 l400.896 306.4937 l401.0879 305.6611 l401.2798 304.8447 l401.4722 304.0454 l401.6641 303.2632 l401.856 302.498 l402.0479 301.751 l402.2402 301.021 l402.4321 300.3091 l402.624 299.6157 l402.8159 298.9404 l403.0078 298.2837 l403.2002 297.646 l403.3921 297.0273 l403.584 296.4277 l403.7759 295.8477 l403.9678 295.2866 l404.1602 294.7456 l404.3521 294.2246 l404.5439 293.7236 l404.7358 293.2427 l404.9282 292.7822 l405.1201 292.3423 l405.312 291.9229 l405.5039 291.5239 l405.6958 291.146 l405.8882 290.7891 l406.0801 290.4531 l406.272 290.1387 l406.4639 289.8452 l406.6563 289.5732 l406.8481 289.3228 l407.04 289.0938 l407.2319 288.8862 l407.4238 288.7007 l407.6162 288.5366 l407.8081 288.3945 l408 288.2739 l408.1919 288.1753 l408.3838 288.0986 l408.5762 288.0439 l408.7681 288.0107 l408.96 288 l409.1519 288.0107 l409.3438 288.0439 l409.5361 288.0986 l409.728 288.1753 l409.9199 288.2739 l410.1118 288.3945 l410.3042 288.5366 l410.4961 288.7007 l410.688 288.8862 l410.8799 289.0938 l411.0718 289.3228 l411.2642 289.5732 l411.4561 289.8452 l411.6479 290.1387 l411.8398 290.4531 l412.0322 290.7891 l412.2241 291.146 l412.416 291.5239 l412.6079 291.9229 l412.7998 292.3423 l412.9922 292.7822 l413.1841 293.2427 l413.376 293.7236 l413.5679 294.2246 l413.7598 294.7456 l413.9521 295.2866 l414.144 295.8477 l414.3359 296.4277 l414.5278 297.0273 l414.7202 297.646 l414.9121 298.2837 l415.104 298.9404 l415.2959 299.6157 l415.4878 300.3091 l415.6802 301.021 l415.8721 301.751 l416.064 302.498 l416.2559 303.2632 l416.4482 304.0454 l416.6401 304.8447 l416.832 305.6611 l417.0239 306.4937 l417.2158 307.3423 l417.4082 308.2075 l417.6001 309.0884 l417.792 309.9844 l417.9839 310.896 l418.1758 311.8228 l418.3682 312.7637 l418.5601 313.7192 l418.752 314.689 l418.9438 315.6724 l419.1357 316.6694 l419.3281 317.6792 l419.52 318.7026 l419.7119 319.7383 l419.9038 320.7861 l420.0962 321.8457 l420.2881 322.9175 l420.48 324 l420.6719 325.0938 l420.8643 326.1982 l421.0562 327.3125 l421.248 328.4375 l421.4399 329.5713 l421.6318 330.7148 l421.8242 331.8672 l422.0161 333.0283 l422.208 334.1973 l422.3999 335.3745 l422.5918 336.5591 l422.7842 337.751 l422.9761 338.9492 l423.168 340.1543 l423.3599 341.3652 l423.5518 342.5815 l423.7441 343.8037 l423.936 345.0303 l424.1279 346.2617 l424.3198 347.4971 l424.5122 348.7368 l424.7041 349.9795 l424.896 351.2256 l425.0879 352.4741 l425.2798 353.7246 l425.4722 354.9775 l425.6641 356.2319 l425.856 357.4873 l426.0479 358.7432 l426.2402 360 l426.4321 361.2568 l426.624 362.5127 l426.8159 363.7681 l427.0078 365.0225 l427.2002 366.2754 l427.3921 367.5259 l427.584 368.7744 l427.7759 370.0205 l427.9678 371.2632 l428.1602 372.5029 l428.3521 373.7383 l428.5439 374.9697 l428.7358 376.1963 l428.9282 377.4185 l429.1201 378.6348 l429.312 379.8457 l429.5039 381.0508 l429.6958 382.249 l429.8882 383.4409 l430.0801 384.6255 l430.272 385.8027 l430.4639 386.9717 l430.6563 388.1328 l430.8481 389.2852 l431.04 390.4287 l431.2319 391.5625 l431.4238 392.6875 l431.6162 393.8018 l431.8081 394.9063 l432 396 lS288 273.6001 m288 446.3999 lS0 O0 g1 w 4 M288 451.3999 m290.5 441.3999 l285.5 441.3999 l288 451.3999 lf0 R0 G0.75 w 10 M129.6001 360 m446.3999 360 lS0 O0 g1 w 4 M451.3999 360 m441.3999 357.5 l441.3999 362.5 l451.3999 360 lf0 To10 0 0 10 266.3999 453.6001 0 Tp0 TvTP0 Tr%_ 0 50 XQ/_Times-Roman 1 0.9683 -0.4136 Tf0 Ts100 100 Tz0 Tt%_0 0 100 100 Xu%AI55J_GlyphSubst: GlyphSubstNone 0 TA%_ 0 XL0 TY0 TV36 0 XbXB0 0 5 TC100 100 100 TW25 TG0 0 0 Ti0 Ta0 1 2 2 99 Th0 Tq240 Tg0 0 Tl0 Tc0 Tw(sin x) Tx (\r) TX TO0 To10 0 0 10 455.04 357 0 Tp0 TvTP0 Tr(x) Tx (\r) TX TOLB%AI5_EndLayer--%%PageTrailergsave annotatepage grestore showpage%%TrailerAdobe_Illustrator_AI5 /terminate get execAdobe_shading_AI8 /terminate get execAdobe_ColorImage_AI6 /terminate get execAdobe_typography_AI5 /terminate get execAdobe_cshow /terminate get execAdobe_level2_AI5 /terminate get exec%%EOF